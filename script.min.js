'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
function readCookie(key) {
    var regex = new RegExp('(?:^|; )' + encodeURIComponent(key) + '=([^;]*)');
    var result = regex.exec(document.cookie);

    return result ? result[1] : null;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
function homegearRandomUserName() {
    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    var id = 'shif-';

    for (var i = 0; i < 8; i++) {
        id += possible.charAt(Math.floor(Math.random() * possible.length));
    }return id;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
function homegear_websocket_security() {
    var opts = interfaceData.options;

    if (location.protocol === 'https:') return true;

    if (opts.websocket_user || opts.websocket_password) return true;

    if (opts.websocket_security_ssl === undefined || opts.websocket_security_ssl === 'location.protocol') return location.protocol === 'https:';

    return !!opts.websocket_security_ssl;
}

function homegear_new() {
    var host = interfaceData.options.websocket_url == 'location.hostname' ? location.hostname : interfaceData.options.websocket_url;
    var port = interfaceData.options.websocket_port == 'location.port' ? location.port : Number(interfaceData.options.websocket_port);

    var secure = homegear_websocket_security();

    return new (Function.prototype.bind.apply(HomegearWS, [null].concat([host, port, homegearRandomUserName(), secure], Array.prototype.slice.call(arguments))))();
}

if (interfaceData.options.websocket_user && interfaceData.options.websocket_password) {
    var homegear = homegear_new(interfaceData.options.websocket_user, interfaceData.options.websocket_password);
} else {
    var homegear = homegear_new(readCookie('PHPSESSIDUI'));
}
////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
homegear.ready(function () {
    var addDevicesAsHomegearPeers = Object.keys(interfaceData.map_invoke).map(Number);

    console.log('HomegearPeers: ');
    console.log(addDevicesAsHomegearPeers);

    homegear.addPeers(addDevicesAsHomegearPeers);
    $('#loadingPage').hide();
});

homegear.connected(function () {});

homegear.disconnected(function () {
    $('#loadingPage').show();
});

////////////////////////////////////////////////////////////////////////////////////////////////////////
//get new sessionid when websocket reconnects
////////////////////////////////////////////////////////////////////////////////////////////////////////
homegear.reconnected(function () {
    window.location.reload(true);
});

////////////////////////////////////////////////////////////////////////////////////////////////////////
//print Homegear errors
////////////////////////////////////////////////////////////////////////////////////////////////////////
homegear.error(function (message) {
    console.log(message);
});

////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
if (location.protocol == 'https:' && interfaceData.options.websocket_security_ssl == false) alert('Error: If you connect to the interface via https you have to use a secure websocket connection!');else homegear.connect();

////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
function roles_relevant(roles) {
    return roles.filter(function (x) {
        return x.hasOwnProperty('id') && x.direction !== 1;
    });
}

function handle_update_event(resp) {
    // DEBUG: works as expected
    var peer = resp.params[1],
        channel = resp.params[2],
        name = resp.params[3];
    var value = resp.params[4];

    if (!(peer in interfaceData.map_invoke && channel in interfaceData.map_invoke[peer] && name in interfaceData.map_invoke[peer][channel])) return;

    var inputs = interfaceData.map_invoke[peer][channel][name];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = inputs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var input = _step.value;

            if (!(input.databaseId in interfaceData.devices && input.control in interfaceData.devices[input.databaseId].controls && input.input in interfaceData.devices[input.databaseId].controls[input.control].variableInputs)) continue;

            if (input.roles === undefined) continue;

            interfaceData.devices[input.databaseId].controls[input.control].variableInputs[input.input].properties.value = value;

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = roles_relevant(input.roles)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var role = _step2.value;

                    app.$root.$emit('role-update', role.id);
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
}

function handle_update_request_ui_refresh(resp) {
    var dt = new Date();

    var month = (dt.getMonth() + 1).toString().padStart(2, '0');
    var day = dt.getDate().toString().padStart(2, '0');
    var year = dt.getFullYear().toString().padStart(4, '0');
    var hour = dt.getHours().toString().padStart(2, '0');
    var minute = dt.getMinutes().toString().padStart(2, '0');
    var second = dt.getSeconds().toString().padStart(2, '0');

    var fixedDate = month + '.' + day + '.' + year + ' ' + hour + ':' + minute + ':' + second;
    error.set('\n        <div class="toast_text">\n            ' + fixedDate + ' | ' + i18n('refresh.message') + '\n        </div>\n        <button class="toast_action" onclick="window.location.reload(true)">\n            ' + i18n('refresh.message.button.text') + '\n        </button>\n    ');
}

function handle_update_variable_profile_state_changed(resp) {
    var id = resp.params[0],
        state = resp.params[1];

    if (interfaceData.profiles[id] === undefined) return;

    interfaceData.profiles[id].isActive = state;
}

function homegear_handle_update(resp) {
    console.log(JSON.stringify(resp, null, 4));

    var funcs = {
        'event': handle_update_event,
        'requestUiRefresh': handle_update_request_ui_refresh,
        'variableProfileStateChanged': handle_update_variable_profile_state_changed
    };

    if (resp.method in funcs) funcs[resp.method](resp);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
// Extensions to the homegear object
////////////////////////////////////////////////////////////////////////////////////////////////////////
function params_create(input, value) {
    if ('value' in input) {
        value = input.value;
    }
    return [Number(input.peer), Number(input.channel), input.name, value, false];
}

function homegear_prepare(homegear) {
    homegear.event(homegear_handle_update);
    homegear.ready(function () {
        app.$mount('#inhalt');
        breadcrumbs.$mount('#breadcrumbs');
    });

    homegear.invoke_raw = homegear.invoke;
    homegear.invoke = function (op, cb) {
        homegear.invoke_raw(op, function (ret) {
            if (ret.error === undefined) return cb ? cb(ret) : undefined;

            console.log('Invoke Error: ' + JSON.stringify(ret.error, null, 4));
        });
    };

    homegear.invoke_multi = function (ops, cb) {
        var object = {
            jsonrpc: '2.0',
            method: 'system.multicall',
            params: ops
        };

        console.log(JSON.stringify(object, null, 4));

        return this.invoke(object, cb);
    };

    homegear.value_set_multi = function (ops, cb) {
        return this.invoke_multi([ops.map(function (op) {
            return {
                methodName: 'setValue',
                params: params_create(op.input, op.value)
            };
        })], cb);
    };

    homegear.value_set_clickcounter = function (control, params, value) {
        var methods = [[{
            methodName: 'setValue',
            params: params_create(params, value)
        }]];

        if (Date.now() - control.lastClickCount > 10000) {
            control.lastClickCount = Date.now();
            methods[0].push({
                methodName: 'setUserData',
                params: ['ui.clickCounts', control.uiElement.databaseId.toString(), ++control.uiElement.clickCount]
            });
        }

        return this.invoke_multi(methods);
    };
}
homegear_prepare(homegear);

////////////////////////////////////////////////////////////////////////////////////////////////////////
// globale Variablen
////////////////////////////////////////////////////////////////////////////////////////////////////////
var controlComponents = {};
var logFrontend = '';
////////////////////////////////////////////////////////////////////////////////////////////////////////
// write console logs to setting/about/nameClick/log page
////////////////////////////////////////////////////////////////////////////////////////////////////////
if (typeof interfaceData.options.consoleLog !== 'undefined' && (interfaceData.options.consoleLog == 'true' || interfaceData.options.consoleLog == true)) {
    console.oldLog = console.log;
    console.log = function (value) {
        console.oldLog(value);
        viewLog(value);
    };

    console.oldWarn = console.warn;
    console.warn = function (value) {
        console.oldWarn(value);
        viewLog(value);
    };

    console.oldError = console.error;
    console.error = function (value) {
        console.oldError(value);
        viewLog(value);
    };

    console.oldInfo = console.info;
    console.info = function (value) {
        console.oldInfo(value);
        viewLog(value);
    };
} else {
    console.oldLog = console.log;
    console.log = function () {};
}

function viewLog(value) {
    if (value !== null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') value = JSON.stringify(value);

    logFrontend += value + '\r\n';

    if ($('#log').length) {
        $('#log').html(logFrontend);
        $('#log').scrollTop(9999999999);
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
// verhindert, dass der PullFromTopToRefresh im Android Chrome Browser ausgeführt werden kann
////////////////////////////////////////////////////////////////////////////////////////////////////////
var lastTouchY = 0;
var preventPullToRefresh = false;

$('body').on('touchstart', function (e) {
    if (e.originalEvent.touches.length != 1) return;

    lastTouchY = e.originalEvent.touches[0].clientY;
    preventPullToRefresh = window.pageYOffset == 0;
});

$('body').on('touchmove', function (e) {
    var touchY = e.originalEvent.touches[0].clientY;
    var touchYDelta = touchY - lastTouchY;

    lastTouchY = touchY;
    if (preventPullToRefresh) {
        preventPullToRefresh = false;
        if (touchYDelta > 0) {
            e.preventDefault();
            return;
        }
    }
});

////////////////////////////////////////////////////////////////////////////////////////////////////////
// passt die Header Tab Anzeige beim scrollen an
////////////////////////////////////////////////////////////////////////////////////////////////////////
headerVisibility('true');
function headerVisibility(state) {
    var stateDownScroll = state === 'true' ? 'block' : 'none';
    var stateUpScroll = 'block';
    var lastScrollTop = 0;

    $('.content').scroll(function (event) {
        var st = $(this).scrollTop();

        if (st > lastScrollTop) {
            // downscroll code
            $('.content_single #tabs').hide();
            $('.content_big #tabs').hide();
        } else {
            // upscroll code
            $('.content_single #tabs').show();
            $('.content_big #tabs').show();
        }
        lastScrollTop = st;
    });
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
// triggert beim Logoff eines Users das Löschen des Cookies
////////////////////////////////////////////////////////////////////////////////////////////////////////
function user_logoff() {
    window.location.href = 'signin.php?logout=1';
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
function i18n(key) {
    var _arr = [interfaceData.i18n, interfaceData.i18n.default];

    for (var _i = 0; _i < _arr.length; _i++) {
        var i = _arr[_i];
        if (key in i) return i[key];
    }return '?';
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
function condition_check(condition, value) {
    if (condition === null || condition === undefined) return true;

    switch (condition.operator) {
        case 'not':
            return value != condition.value;
        case 'e':
            return value == condition.value;
        case 'g':
            return value > condition.value;
        case 'l':
            return value < condition.value;
        case 'ge':
            return value >= condition.value;
        case 'le':
            return value <= condition.value;
        case 't':
            return true;
        case 'f': // fall through
        default:
            return false;
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
function condition_get_matching(rendering, props) {
    for (var i = 0; i < rendering.length; ++i) {
        var cur = rendering[i];

        if (condition_check(cur.condition, props.value)) return cur.definitions;
    }

    // return empty default
    return {};
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
function get_or_default(obj, key, def) {
    return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) == 'object' && key in obj ? obj[key] : def;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
function set_or_extend(arr, idx, vals) {
    if (idx >= arr.length) arr.push(vals);else {
        var keys = Object.keys(vals);
        for (var i = 0; i < keys.length; ++i) {
            arr[idx][keys[i]] = vals[keys[i]];
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
// VUE default components
////////////////////////////////////////////////////////////////////////////////////////////////////////
// Clone {{{
// src: https://stackoverflow.com/a/728694
function clone(obj) {
    var copy;

    // Handle the 3 simple types, and null or undefined
    if (null == obj || 'object' != (typeof obj === 'undefined' ? 'undefined' : _typeof(obj))) return obj;

    // Handle Date
    if (obj instanceof Date) {
        copy = new Date();
        copy.setTime(obj.getTime());
        return copy;
    }

    // Handle Array
    if (obj instanceof Array) {
        copy = [];
        for (var i = 0, len = obj.length; i < len; i++) {
            copy[i] = clone(obj[i]);
        }
        return copy;
    }

    // Handle Object
    if (obj instanceof Object) {
        copy = {};
        for (var attr in obj) {
            if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);
        }
        return copy;
    }

    throw new Error('Unable to copy obj! Its type isn\'t supported.');
}
// }}}


// Utils {{{
Vue.component('shif-title', {
    props: {
        classname: String,
        disabled: {
            type: Object,
            default: function _default() {
                return { flag: false };
            }
        }
    },
    template: '\n        <div class="device_title" v-bind:class="classname">\n            <slot></slot>\n            <span v-if="disabled.flag" class="disabled_text">\n                {{ disabled.texts.title }}\n            </span>\n        </div>\n    '
});

Vue.component('shif-status', {
    props: ['classname', 'key_vals'],
    template: '\n        <div class="device_status" v-bind:class="classname">\n            <template v-if="key_vals">\n                <template v-if="key_vals.length === 0">\n                    <div class="device_status_entry"></div>\n                </template>\n                <template v-else>\n                    <span v-for="i in key_vals" class="device_status_entry">\n                        <span v-if="i.key" class="name">{{ i.key }}:</span>\n\n                        <template v-if="typeof(i.value) === \'object\' && i.value.type === \'color\'">\n                            <span class="status_color_bullet"\n                                  v-bind:style="{backgroundColor: i.value.color}">\n                            </span>\n                        </template>\n                        <template v-else>\n                            <span class="value">{{ i.value }}</span>\n                        </template>\n                    </span>\n                </template>\n            </template>\n            <template v-else>\n                <div class="device_status_entry">\n                    <slot></slot>\n                </div>\n            </template>\n        </div>\n    '
});

Vue.component('shif-icon', {
    props: {
        src: {
            type: String,
            required: true
        },
        classname: String,
        active: String,
        rotate: Boolean
    },

    template: '\n        <div v-bind:class="classname" v-on:click="$emit(\'click\', this)">\n            <template v-if="src in interfaceIcons">\n                <div class="svg_icon"\n                     v-bind:class="[src, active, {accordion_arrow_rotated: rotate}]"\n                     v-html="interfaceIcons[src]">\n                </div>\n            </template>\n            <template v-else-if="src in interfaceData.iconFallback">\n                <div class="svg_icon"\n                     v-bind:class="[src, active, {accordion_arrow_rotated: rotate}]"\n                     v-html="interfaceIcons[interfaceData.iconFallback[src]]">\n                </div>\n            </template>\n            <template v-else>\n                <div class="svg_icon icon_default">\n                    <svg xmlns="http://www.w3.org/2000/svg" version="1.1" x="0" y="0" width="500" height="500" viewBox="0 0 500 500">\n                        <path d="M227.52 320.99L227.52 301.54Q227.52 289.25 229.31 279.52 231.1 269.79 234.94 261.09 238.78 252.38 245.18 244.19 251.58 236 261.31 226.78L284.35 204.77Q294.08 196.06 300.99 185.31 307.9 174.56 307.9 159.2 307.9 139.23 295.36 125.66 282.82 112.1 259.78 112.1 248 112.1 238.53 116.45 229.06 120.8 222.14 128.22 215.23 135.65 211.65 145.38 208.06 155.1 207.55 165.34L144.58 159.71Q147.65 135.14 157.63 115.94 167.62 96.74 183.49 83.42 199.36 70.11 219.84 63.2 240.32 56.29 263.87 56.29 285.89 56.29 305.6 62.69 325.31 69.09 340.42 81.63 355.52 94.18 364.22 112.61 372.93 131.04 372.93 155.1 372.93 171.49 369.34 183.78 365.76 196.06 359.1 206.3 352.45 216.54 342.98 226.02 333.5 235.49 321.73 245.73 311.49 254.43 305.09 261.09 298.69 267.74 294.85 274.4 291.01 281.06 289.47 288.74 287.94 296.42 287.94 307.68L287.94 320.99zM217.28 392.16Q217.28 375.78 229.31 364 241.34 352.22 258.24 352.22 274.62 352.22 286.91 363.49 299.2 374.75 299.2 391.14 299.2 407.52 287.17 419.3 275.14 431.07 258.24 431.07 250.05 431.07 242.62 428 235.2 424.93 229.57 419.81 223.94 414.69 220.61 407.52 217.28 400.35 217.28 392.16z"/>\n                    </svg>\n                </div>\n            </template>\n        </div>\n    '
});

Vue.component('shif-slider', {
    props: {
        min: Number,
        max: Number,
        unit: String,
        value: Number,
        title: String,
        step: Number,
        disabled: {
            type: Object,
            default: function _default() {
                return { flag: false };
            }
        },
        precision: {
            type: Number,
            default: 0
        }
    },

    computed: {
        value_formatted: function value_formatted() {
            return this.float_formatted(this.value, this.precision);
        }
    },

    template: '\n        <div class="device_wrapper" v-bind:class="{disabled: disabled.flag}">\n            <div class="device slider">\n                <div v-if="$slots.profiles"\n                     class="checkbox_wrapper">\n                    <slot name="profiles" />\n                </div>\n                <shif-title v-bind:disabled="disabled">{{ title }}</shif-title>\n\n                <div class="slider_action">\n                    <div class="amount">\n                        <p>{{ value_formatted }} {{ unit }}</p>\n                    </div>\n                </div>\n\n                <input type="range"\n                        class="range"\n                        name="range"\n                        v-bind:step="step"\n                        v-bind:min="min"\n                        v-bind:max="max"\n                        v-bind:value="value"\n                        v-bind:disabled="disabled.flag"\n                        v-on:change="$emit(\'change\', parseFloat($event.target.value))"\n                        v-on:input="$emit(\'input\', parseFloat($event.target.value))" />\n\n                <div class="slider_marks">\n                    <div class="left">\n                        {{ min }} {{ unit }}\n                    </div>\n                    <div class="right">\n                        {{ max }} {{ unit }}\n                    </div>\n                </div>\n            </div>\n        </div>\n    '
});

Vue.component('shif-radio', {
    props: {
        title: String,
        classname: String,
        values: Array,
        disabled: {
            type: Object,
            default: function _default() {
                return { flag: false };
            }
        }
    },

    computed: {
        identifier: function identifier() {
            return 'x' + Math.random().toString(36).substring(10);
        }
    },

    template: '\n        <div class="device_wrapper" v-bind:class="{disabled: disabled.flag}">\n            <div class="device">\n                <div v-if="$slots.profiles"\n                     class="checkbox_wrapper">\n                    <slot name="profiles" />\n                </div>\n                <shif-title v-bind:disabled="disabled">{{ title }}</shif-title>\n                <div class="device_radio">\n                    <template v-for="i in values">\n                        <label class="rad">\n                            <span class="rad_name">{{ i.name }}</span>\n                            <input type="radio"\n                                   v-bind:name="identifier"\n                                   v-bind:value="i.value"\n                                   v-bind:checked="i.selected"\n                                   v-bind:disabled="disabled.flag"\n                                   v-on:input="$emit(\'input\', $event.target.value)" />\n                            <i></i>\n                        </label>\n                    </template>\n                </div>\n            </div>\n        </div>\n    '
});

Vue.component('shif-dropdown', {
    props: {
        title: String,
        classname: String,
        values: Array,
        selected: [String, Number],
        disabled: {
            type: Object,
            default: function _default() {
                return { flag: false };
            }
        }
    },

    data: function data() {
        return {
            selected_entry: this.selected
        };
    },

    template: '\n        <div class="device_wrapper" v-bind:class="{disabled: disabled.flag}">\n            <div class="device">\n                <div v-if="$slots.profiles"\n                     class="checkbox_wrapper">\n                    <slot name="profiles" />\n                </div>\n                <shif-title v-bind:disabled="disabled">{{ title }}</shif-title>\n                <div class="device_dropdown">\n                    <select v-bind:class="{disabled: disabled.flag}"\n                            v-model="selected_entry"\n                            v-on:change="$emit(\'change\', selected_entry)">\n                        <option v-for="i in values"\n                                v-bind:value="i.value">\n                            {{ i.name }}\n                        </option>\n                    </select>\n                </div>\n            </div>\n        </div>\n    '
});

Vue.component('shif-button', {
    props: {
        width: {
            type: String,
            default: '100%'
        },
        classname: String,
        disabled: {
            type: Object,
            default: function _default() {
                return { flag: false };
            }
        }
    },
    template: '\n        <div class="control_button"\n             v-bind:class="{[classname]: true, disabled: disabled.flag}"\n             v-bind:style="{width}"\n             v-on:click="(!disabled.flag) && $emit(\'click\', 1)">\n            <slot></slot>\n        </div>\n    '
});

Vue.component('shif-colorpicker', {
    props: {
        width: { type: [Number, Object], required: true },
        height: { type: [Number, Object], required: true },
        color: { type: String, required: true },
        padding: { type: Number, default: 1 },
        borderWidth: { type: Number, default: 3 },
        handleRadius: { type: Number, default: 12 },
        sliderMargin: { type: Number, default: 24 },
        sliderHeight: { type: Number, default: 32 },
        borderColor: { type: String, default: '#fff' },
        anticlockwise: { type: Boolean, default: true },
        title: { type: String }
    },

    data: function data() {
        return {
            handle: null
        };
    },

    watch: {
        color: function color(color_new) {
            if (this.handle) this.handle.color.hexString = color_new;
        }
    },

    mounted: function mounted() {
        function rel_to_abs_px(dim_elem, dim_wanted) {
            var result = dim_elem;

            if (typeof dim_wanted === 'number') return result * (dim_wanted / 100);

            if ((typeof dim_wanted === 'undefined' ? 'undefined' : _typeof(dim_wanted)) === 'object' && 'percent' in dim_wanted && typeof dim_wanted.percent === 'number') {

                result *= dim_wanted.percent / 100;

                if ('max_pixels' in dim_wanted && typeof dim_wanted.max_pixels === 'number') result = Math.min(result, dim_wanted.max_pixels);
            }

            return result - 30;
        }

        var elem = this.$refs.colorpicker;
        this.handle = new iro.ColorPicker(elem, {
            width: rel_to_abs_px(elem.scrollWidth, this.width),
            height: rel_to_abs_px(elem.scrollHeight, this.height),
            color: this.color,
            title: this.title,
            handleRadius: this.handleRadius,
            padding: this.padding,
            sliderMargin: this.sliderMargin,
            sliderHeight: this.sliderHeight,
            borderWidth: this.borderWidth,
            borderColor: this.borderColor,
            anticlockwise: this.anticlockwise,
            display: 'block',
            layout: [{
                component: iro.ui.Wheel,
                options: {}
            }, {
                // regular value slider
                component: iro.ui.Slider,
                options: {}
            }, {
                // hue slider
                component: iro.ui.Slider,
                options: {
                    sliderType: 'hue'
                }
            }, {
                // saturation slider
                component: iro.ui.Slider,
                options: {
                    sliderType: 'saturation'
                }
            }]
        });

        // `on` patches `this`.
        // So we need to back it up first.
        var outer = this;
        this.handle.on('color:change', function (color, changes) {
            outer.$emit('color:change', { color: color, changes: changes });
        });
        this.handle.on('input:start', function (color) {
            outer.$emit('input:start', { color: color });
        });
        this.handle.on('input:end', function (color) {
            outer.$emit('input', color.hexString);
        });
    },

    template: '\n        <div class="device_wrapper">\n            <div class="device color">\n                <div v-if="$slots.profiles"\n                     class="checkbox_wrapper">\n                    <slot name="profiles" />\n                </div>\n                <shif-title v-if="title">{{ title }}</shif-title>\n                <div ref="colorpicker">\n                </div>\n            </div>\n        </div>\n    '
});

Vue.component('shif-checkbox', {
    props: {
        value: {
            type: Boolean,
            required: true
        }
    },
    template: '\n        <label class="check">\n            <input type="checkbox"\n                   v-bind:checked="value"\n                   v-on:click="$emit(\'click\', $event.target.checked)"\n                   v-on:input="$emit(\'input\', $event.target.checked)">\n            <span class="checkmark"></span>\n        </label>\n    '
});
// }}}


// Generic l2 {{{
Vue.component('shif-generic-l2', {
    props: {
        icon: String,
        place: String,
        title: String,
        status: [Array, String],
        actions: Boolean,
        icon_rotate: Boolean,
        accordion: Boolean,
        disabled: {
            type: Object,
            default: function _default() {
                return { flag: false };
            }
        },
        active: {
            type: Object,

            default: function _default() {
                return {
                    icon: '',
                    text: ''
                };
            }
        }
    },

    mounted: function mounted() {
        if (this.$listeners && this.$listeners.click !== undefined && this.$listeners.click_icon === undefined) this.$on('click_icon', this.$listeners.click);
    },

    methods: {
        emit: function emit(key, val) {
            if (this.disabled.flag) return;

            if (val === undefined) this.$emit(key);else this.$emit(key, val);
        }
    },

    template: '\n        <div class="device_wrapper"\n             v-bind:class="{disabled: disabled.flag}"\n             v-on:mousedown="emit(\'mousedown\')"\n             v-on:mouseup="emit(\'mouseup\')"\n             v-on:click="emit(\'click\')">\n            <div class="device">\n\n                <div v-if="$slots.favorites"\n                     class="checkbox_right_50">\n                    <slot name="favorites" />\n                </div>\n\n                <div v-if="$slots.profiles">\n                    <slot name="profiles" />\n                </div>\n\n                <div v-on:click.stop="emit(\'click_icon\')">\n                    <shif-icon v-bind:src="icon"\n                               v-bind:active="active.icon"\n                               classname="device_icon">\n                    </shif-icon>\n                </div>\n                <div class="device_text">\n                    <shif-title v-bind:disabled="disabled">{{ title }}</shif-title>\n                    <div v-if="place" class="device_location">\n                        {{ place }}\n                    </div>\n                    <template v-if="typeof(status) === \'object\'">\n                        <shif-status v-bind:classname="active.text"\n                                     v-bind:key_vals="status">\n                        </shif-status>\n                    </template>\n                    <template v-else>\n                        <shif-status v-bind:classname="active.text">{{ status }}</shif-status>\n                    </template>\n                </div>\n                <div v-if="actions"\n                     class="device_action">\n                    <template v-if="accordion">\n                        <shif-icon src="arrow_down_1" v-bind:rotate="icon_rotate"></shif-icon>\n                    </template>\n                    <template v-else>\n                        <div class="svg_icon arrow_right_1">\n                            <svg xmlns="http://www.w3.org/2000/svg" version="1.1" id="svg" x="0" y="0" width="370.81" height="370.81" viewBox="0 0 370.81 370.81">\n                                <g id="Ebene_1">\n                                    <path d="M77.9 345.97L102.03 370.81 292.92 185.41 102.03 0 77.9 24.85 243.18 185.41z"/>\n                                </g>\n                            </svg>\n                        </div>\n                    </template>\n                </div>\n            </div>\n        </div>\n    '
});
// }}}


// [shif_device] Generic Shif Device Component Object {{{
function status_impl(control, layer) {
    var out = [];

    var key = control.texts && control.texts.l2_state_title && control.texts.l2_state_title.content ? control.texts.l2_state_title.content : null;

    if (control.metadata !== undefined && control.metadata.statusColor === true && control.variableInputs.length > 0) return [{
        key: key,
        value: {
            type: 'color',
            color: control.variableInputs[0].properties.value
        }
    }];

    var val = [];
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
        for (var _iterator3 = control.variableInputs[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var input = _step3.value;

            if (input.properties.visualizeInOverview === false && layer == 2) continue;

            if (input.rendering) {
                var sel = condition_get_matching(input.rendering, input.properties);
                if (Object.keys(sel).length > 0) {
                    val.push(sel.texts.state.content);
                    continue;
                }
            }

            var unit = input.properties.unit ? input.properties.unit : '';
            val.push(input.properties.value + ' ' + unit);
        }
    } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                _iterator3.return();
            }
        } finally {
            if (_didIteratorError3) {
                throw _iteratorError3;
            }
        }
    }

    if (val.length > 0) out.push({ key: key, value: val.join(', ') });

    return out;
}

var shif_device = {
    props: ['uiElement', 'control', 'device', 'icons', 'texts', 'output', 'props', 'indexes', 'rendering', 'include_place'],

    data: function data() {
        return {
            lastClickCount: 0,
            profile_state: false
        };
    },

    inject: ['layer'],

    methods: {
        status_minimal: function status_minimal() {
            var descs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            var raw = status_impl(this.control, this.layer);

            return descs ? raw : raw.map(function (x) {
                return { value: x.value };
            });
        }
    },

    computed: {
        cond: function cond() {
            var sel = condition_get_matching(this.rendering, this.props);

            return {
                text: get_or_default(sel.texts, 'state', { content: '', color: '' }),
                icon: get_or_default(sel.icons, 'state', { name: '', color: '' })
            };
        },

        dev: function dev() {
            return interfaceData.devices[this.device];
        },

        place: function place() {
            if (!this.include_place) return null;

            var room = interfaceData.rooms[this.dev.room];
            if (interfaceData.options.showFloor !== true) return room.name;

            return room.floors.map(function (x) {
                return interfaceData.floors[x];
            }).map(function (x) {
                return x.name + ' - ' + room.name;
            }).join(' | ');
        },

        title: function title() {
            if (this.control.texts && this.control.texts.title && this.control.texts.title.content) return this.control.texts.title.content;

            return this.dev.label;
        },

        status: function status() {
            var out = [];

            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = this.dev.controls[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var control = _step4.value;

                    out = out.concat(status_impl(control, this.layer));
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            return out;
        },

        breadcrumb: function breadcrumb() {
            return (this.place ? this.place + ' | ' : '') + this.dev.label;
        },

        disabled: function disabled() {
            return check_disabled(this.uiElement, this.indexes);
        }
    }
};

function shif_comps_create(name, l2, l3) {
    var shif_name = 'shif-' + name + '-';

    controlComponents[name] = {
        l2: Vue.component(shif_name + 'l2', l2),
        l3: Vue.component(shif_name + 'l3', l3)
    };
}
// }}}


Vue.component('shif-room', {
    props: {
        floor: Object,
        room: [String, Number]
    },
    methods: {
        link: function link(floor_key, room_val) {
            return {
                name: 'house.tab.rooms.room',
                params: {
                    floor: floor_key,
                    room: room_val
                }
            };
        }
    },

    template: '\n        <div class="roomSelect_wrapper">\n            <router-link v-bind:to="link(floor.key, room)">\n                <shif-icon v-bind:src="interfaceData.rooms[room].icon"\n                           class="roomSelect" />\n\n                <div class="description">\n                    {{ interfaceData.rooms[room].name }}\n                </div>\n            </router-link>\n        </div>\n    '
});

Vue.component('shif-tab', {
    props: {
        width: {
            type: String,
            default: '50%'
        }
    },
    template: '\n        <div class="tab button"\n             v-bind:style="{width: width}"\n             v-on:click="$emit(\'click\', 1)">\n             <slot></slot>\n        </div>\n    '
});

function comp_obj(control, device, input, output, is, indexes) {
    var ret = {
        uiElement: device,
        control: control,
        device: device.databaseId,
        icons: device.icons,
        texts: device.texts,
        output: output,
        props: input.properties,
        indexes: indexes,
        rendering: input.rendering
    };

    if (is) ret.is = is;

    return ret;
}

var mixin_menus = {
    methods: {
        disabled: function disabled(type, key) {
            var key_type = {
                'mainmenu': 'disabledMainmenus',
                'menu': 'disabledMenus'
            }[type];

            return interfaceData.options && interfaceData.options[key_type] && interfaceData.options[key_type][key] === true;
        }
    }
};

var mixin_components = {
    methods: {
        find_component: function find_component(device, layer) {
            if (layer == 'l2' && _typeof(device.metadata) == 'object') {
                if ('l2_action' in device.metadata) {
                    var keys = device.metadata.l2_action;

                    var control = device.controls[keys.control];
                    var input = control.variableInputs[keys.input];
                    var output = control.variableOutputs[keys.input];
                    var is = 'shif-' + control.control + '-l2';

                    return [comp_obj(control, device, input, output, is, { input: keys.input, control: keys.control })];
                }

                if (device.controls.length <= 1 && (!('l3_force' in device.metadata) || device.metadata.l3_force !== true)) layer = 'l3';
            }

            var out = [];
            // for (const control of device.controls) {
            for (var i = 0; i < device.controls.length; ++i) {
                var _control = device.controls[i];

                for (var k in _control.variableInputs) {
                    var _input = _control.variableInputs[k];
                    var _output = _control.variableOutputs[k];
                    var _is = 'shif-' + _control.control + '-' + layer;

                    out.push(comp_obj(_control, device, _input, _output, _is, { input: k, control: i }));
                }
            }

            return out;
        }
    }
};

var mixin_print_mounted = function mixin_print_mounted(name) {
    return {
        // This is for debug reasons only
        // mounted: function () {
        // console.log(this.$options.name || name);
        // },
    };
};

function root_profiles_idx(peer, channel, name) {
    return peer + '.' + channel + '.' + name;
}

var mixin_profiles = {
    computed: {
        global_profiles: function global_profiles() {
            return Object.keys(interfaceData.profiles).map(function (x) {
                return interfaceData.profiles[x];
            }).filter(function (x) {
                return x.global === true;
            });
        },

        local_profiles: function local_profiles() {
            var floor = parseInt(this.$route.params.floor);
            var room = parseInt(this.$route.params.room);

            return Object.keys(interfaceData.profiles).map(function (x) {
                return interfaceData.profiles[x];
            }).filter(function (x) {
                return x.locations.findIndex(function (loc) {
                    return loc.floorId === floor && (loc.roomId === undefined || loc.roomId === room);
                }) !== -1;
            });
        }

    },

    methods: {
        locations: function locations(floor, room) {
            if (floor === undefined && room === undefined) return [];

            return [{
                floorId: floor === null ? undefined : Number(floor),
                roomId: room === null ? undefined : Number(room)
            }];
        },

        role_profiles: function role_profiles(role_id) {
            return Object.keys(interfaceData.profiles).map(function (x) {
                return interfaceData.profiles[x];
            }).filter(function (x) {
                return x.roles !== undefined && x.roles.length > 0 && x.roles.findIndex(function (x) {
                    return x.role === Number(role_id);
                }) !== -1;
            });
        },

        profile_build_root_devs: function profile_build_root_devs(profile) {
            // Overwrite current profile on new load
            this.$root.profiles.devs = {};

            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = profile.values[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var i = _step5.value;

                    var idx = root_profiles_idx(i.peerId, i.channel, i.variable);
                    this.$root.profiles.devs[idx] = {
                        peer: i.peerId,
                        channel: i.channel,
                        name: i.variable,
                        value: i.value
                    };
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }
        },

        profile_load: function profile_load(profile, cb) {
            var _this = this;

            this.profile_start(profile, function (result) {
                _this.$root.favorites.enabled = false;
                _this.$root.profiles.enabled = true;

                if (cb) return cb(result);
            });
        },

        profile_start: function profile_start(profile, cb) {
            return this.$homegear.invoke({
                jsonrpc: '2.0',
                method: 'activateVariableProfile',
                params: [profile.id]
            }, cb);
        },

        profile_delete: function profile_delete(profile, cb) {
            var _this2 = this;

            return this.$homegear.invoke({
                jsonrpc: '2.0',
                method: 'deleteVariableProfile',
                params: [profile.id]
            }, function (result) {
                delete interfaceData.profiles[_this2.profile.id];

                if (cb) return cb(result);
            });
        },

        profile_add: function profile_add(form, cb) {
            var _this3 = this;

            var locations = this.locations(form.location.floor, form.location.room);

            return this.$homegear.invoke({
                jsonrpc: '2.0',
                method: 'addVariableProfile',
                params: [_defineProperty({}, interfaceData.options.language, form.profile_name), {
                    global: form.location.global,
                    icon: form.icon,
                    locations: locations,
                    roles: [],
                    values: []
                }]
            }, function (result) {
                interfaceData.profiles[result.result] = {
                    id: result.result,
                    icon: form.icon,
                    locations: locations,
                    global: form.location.global,
                    name: form.profile_name,
                    roles: [],
                    values: []
                };

                _this3.$root.profiles.enabled = false;

                if (cb) return cb(result);
            });
        },

        profile_update: function profile_update(profile, form, cb) {
            var _this4 = this;

            function val_into_proper_type(value) {
                if (value === 'true') return true;
                if (value === 'false') return false;

                var as_nr = Number(value);
                if (!Number.isNaN(as_nr)) return as_nr;

                return value;
            }

            var locations = this.locations(form.location.floor, form.location.room);

            var _ref2 = form.role.role !== null && form.role.value !== undefined && form.role.value !== null ? [[{
                role: Number(form.role.role),
                value: val_into_proper_type(form.role.value)
            }], []] : [[], Object.keys(this.$root.profiles.devs).map(function (x) {
                return _this4.$root.profiles.devs[x];
            }).map(function (x) {
                return {
                    peerId: x.peer,
                    channel: x.channel,
                    variable: x.name,
                    value: x.value
                };
            })],
                _ref3 = _slicedToArray(_ref2, 2),
                roles = _ref3[0],
                values = _ref3[1];

            return this.$homegear.invoke({
                jsonrpc: '2.0',
                method: 'updateVariableProfile',
                params: [profile.id, _defineProperty({}, interfaceData.options.language, form.profile_name), {
                    global: form.location.global,
                    icon: form.icon,
                    locations: locations,
                    roles: roles,
                    values: values
                }]
            }, function (result) {
                interfaceData.profiles[profile.id] = {
                    id: profile.id,
                    name: form.profile_name,
                    global: form.location.global,
                    icon: form.icon,
                    locations: locations,
                    roles: roles,
                    values: values
                };

                _this4.$root.profiles.enabled = false;

                if (cb) return cb(result);
            });
        }
    }
};

var mixin_favorites = {
    methods: {
        dev_toggle_favorite: function dev_toggle_favorite(dev, state) {
            var _this5 = this;

            this.$homegear.invoke({
                jsonrpc: '2.0',
                method: 'getUiElementMetadata',
                params: [dev]
            }, function (data) {
                var new_metadata = data.result;

                if (new_metadata.favorites === undefined) new_metadata.favorites = {};

                new_metadata.favorites.state = state;

                _this5.$homegear.invoke({
                    jsonrpc: '2.0',
                    method: 'setUiElementMetadata',
                    params: [dev, new_metadata]
                }, function () {
                    interfaceData.devices[dev].dynamicMetadata.favorites = new_metadata.favorites;
                });
            });
        }
    }
};

Vue.component('shif-trans-drop-down', {
    template: '\n        <transition name="trans-drop-down">\n            <slot />\n        </transition>\n    '
});

Vue.component('shif-trans-right-in-out', {
    template: '\n        <transition name="trans-right-in-out" tag="div">\n            <slot />\n        </transition>\n    '
});

Vue.component('shif-house-collected-entries', {
    mixins: [mixin_components, mixin_profiles, mixin_print_mounted()],

    props: {
        layer: {
            type: Number,
            required: true
        },

        favorites: {
            type: Boolean,
            default: false
        },

        include_place: {
            type: Boolean,
            default: false
        }
    },

    provide: function provide() {
        return {
            layer: this.layer
        };
    },

    computed: {
        dev_objs: function dev_objs() {
            var _this6 = this;

            if (this.layer === 2) {
                var devices = this.favorites === true ? Object.keys(interfaceData.devices).map(function (dev) {
                    return interfaceData.devices[dev];
                }).filter(function (dev) {
                    return dev.dynamicMetadata.favorites && dev.dynamicMetadata.favorites.state;
                }) : interfaceData.rooms[this.$route.params.room].devices.map(function (dev) {
                    return interfaceData.devices[dev];
                });

                return devices.map(function (dev) {
                    return _this6.find_component(dev, 'l2');
                });
            }

            if (this.layer === 3) {
                var device = interfaceData.devices[this.$route.params.device];
                return this.find_component(device, 'l3');
            }

            throw 'Not implemented';
        }
    },

    methods: {
        get_icon_or_default: function get_icon_or_default(profile) {
            return get_or_default(profile, 'icon', 'slider_1');
        }
    },

    template: '\n        <div>\n            <div class="profiles_wrapper">\n                <template v-if="layer === 2 && ! favorites"\n                          v-for="i in local_profiles">\n                    <shif-generic-l2 v-bind:icon="get_icon_or_default(i)"\n                                     v-bind:title="i.name"\n                                     v-bind:status="i18n(\'modemenu.profiles.name.label\')"\n                                     v-bind:active="{icon: i.isActive ? \'active\' : \'\'}"\n                                     v-on:click="profile_start(i)">\n                    </shif-generic-l2>\n                </template>\n            </div>\n\n            <template v-for="dev in dev_objs">\n                <component v-bind="dev"\n                           v-bind:include_place="include_place" />\n\n                <template v-if="debug">\n                    {{ dev | pretty | log }}\n                </template>\n            </template>\n        </div>\n    '
});

Vue.component('shif-mainmenu-tabs', {
    mixins: [mixin_print_mounted()],

    computed: {
        idx_mainmenu: function idx_mainmenu() {
            var menu_name = this.$route.matched[0].name;
            return interfaceData.mainmenu.findIndex(function (x) {
                return x.name === menu_name;
            });
        },

        tabs: function tabs() {
            return interfaceData.mainmenu[this.idx_mainmenu].tabs;
        },

        tab_width: function tab_width() {
            return 100 / this.tabs.length + '%';
        }
    },

    template: '\n        <div>\n            <div id="tabs">\n                <template v-for="tab in tabs">\n                    <router-link v-bind:to="{name: tab.name}">\n                        <shif-tab v-bind:width="tab_width">\n                            {{ i18n(tab.name) }}\n                        </shif-tab>\n                    </router-link>\n                </template>\n            </div>\n\n            <div class="tabWrapper activeTab" style="text-align: center;">\n                <slot />\n            </div>\n        </div>\n    '
});

Vue.component('shif-paging', {
    mixins: [mixin_print_mounted()],

    computed: {
        is_single_view: function is_single_view() {
            var idx = this.$route.matched.length - 1;
            var route = this.$route.matched[idx];

            return route !== undefined && route.components !== undefined && route.components.default !== undefined;
        }
    },

    template: '\n        <div>\n            <router-view v-if="is_single_view"\n                         name="default"\n                         class="content content_single"\n                         v-bind:key="$route.fullPath + \'_left\'" />\n\n            <router-view v-else\n                         name="small"\n                         class="content content_small"\n                         v-on:click.native="$router.back()"\n                         v-bind:key="$route.fullPath + \'_left\'" />\n\n            <shif-trans-right-in-out>\n                <router-view name="big"\n                             v-if="!is_single_view"\n                             class="content content_big"\n                             v-bind:key="$route.fullPath" />\n            </shif-trans-right-in-out>\n        </div>\n    '
});

Vue.component('shif-checkbox-favorites', {
    mixins: [mixin_favorites],

    props: {
        dev: {
            type: Object,
            required: true
        },
        classname: {
            type: String,
            default: 'checkbox_right_50'
        }
    },

    inject: ['layer'],

    data: function data() {
        return {
            state: this.dev !== undefined && this.dev.dynamicMetadata !== undefined && this.dev.dynamicMetadata.favorites !== undefined && this.dev.dynamicMetadata.favorites.state === true
        };
    },

    methods: {
        change: function change() {
            return this.dev_toggle_favorite(this.dev.databaseId, this.state);
        }
    },

    template: '\n        <div>\n            <template v-if="layer === 2 && $root.favorites.enabled">\n                <div v-on:click.stop=""\n                     v-on:change.stop="change">\n                    <div v-bind:class="classname">\n                        <shif-checkbox v-model="state" />\n                    </div>\n                </div>\n            </template>\n        </div>\n    '
});

Vue.component('shif-checkbox-profiles', {
    mixinx: [mixin_profiles],

    props: {
        dev: {
            type: Object,
            required: true
        },
        output: {
            type: Object,
            required: true
        },
        props: {
            type: Object,
            required: true
        },
        classname: {
            type: String,
            default: ''
        }
    },

    data: function data() {
        var idx = root_profiles_idx(this.output.peer, this.output.channel, this.output.name);

        return {
            idx: idx,
            state: idx in this.$root.profiles.devs
        };
    },

    watch: {
        'props.value': function propsValue() {
            if (this.$root.profiles.enabled && this.idx in this.$root.profiles.devs) this.$root.profiles.devs[this.idx].value = this.props.value;
        }
    },

    methods: {
        change: function change() {
            if (this.state) this.$root.profiles.devs[this.idx] = {
                peer: this.output.peer,
                channel: this.output.channel,
                name: this.output.name,
                value: this.props.value
            };else if (this.idx in this.$root.profiles.devs) delete this.$root.profiles.devs[this.idx];
        }
    },

    template: '\n        <div>\n            <template v-if="$root.profiles.enabled">\n                <div v-on:click.stop=""\n                     v-on:change.stop="change">\n                    <div v-bind:class="classname">\n                        <shif-checkbox v-model="state" />\n                    </div>\n                </div>\n            </template>\n        </div>\n    '
});

Vue.component('shif-mainmenu', {
    mixins: [mixin_menus, mixin_print_mounted()],

    data: function data() {
        var _this7 = this;

        return {
            enabled_menus: interfaceData.mainmenu.filter(function (x) {
                return !_this7.disabled('mainmenu', x.name);
            }),
            active: true
        };
    },

    computed: {
        width: function width() {
            return 100 / this.enabled_menus.length + '%';
        }
    },

    template: '\n        <div id="mainmenu">\n            <ul class="menu">\n                <li v-for="i in enabled_menus"\n                    v-bind:style="{width: width}">\n\n                    <router-link v-bind:to="{name: i.name}">\n                        <div v-bind:id="\'mainmenu_\' + i.name"\n                             class="mainmenu_button">\n                             <shif-icon v-bind:src="i.icon" />\n                        </div>\n                    </router-link>\n\n                </li>\n            </ul>\n        </div>\n    '
});

Vue.component('shif-modemenu', {
    mixins: [mixin_profiles],

    methods: {
        link_profile: function link_profile() {
            return {
                name: 'settings.profiles.profile',
                params: {
                    profile: this.$root.profiles.id
                }
            };
        },

        submit_profile: function submit_profile() {
            this.profile_update(interfaceData.profiles[this.$root.profiles.id], this.$root.profiles.form);
        }
    },

    template: '\n        <div id="modemenu">\n            <div v-if="$root.favorites.enabled">\n                <div class="mode_text">\n                    <span class="mode_name">{{ i18n(\'modemenu.favorites.name\') }}</span>\n                </div>\n                <div class="mode_buttons">\n                    <div v-on:click="$root.favorites.enabled = false" class="mode_end">\n                        {{ i18n(\'modemenu.favorites.button.end\') }}\n                    </div>\n                </div>\n            </div>\n\n            <div v-if="$root.profiles.enabled" id="mode_wrapper_profiles">\n                <div class="mode_text">\n                    <span class="mode_label">\n                        {{ i18n(\'modemenu.profiles.name.label\') }}:\n                    </span>\n                    <span class="mode_name">\n                        {{ $root.profiles.form.profile_name }}\n                    </span>\n                </div>\n                <div class="mode_buttons">\n                    <router-link v-bind:to="link_profile()">\n                        <div class="mode_settings">\n                            {{ i18n(\'modemenu.profiles.button.settings\') }}\n                        </div>\n                    </router-link>\n                    <div v-on:click="submit_profile"\n                         class="mode_end">\n                        {{ i18n(\'modemenu.profiles.button.end\') }}\n                    </div>\n                </div>\n            </div>\n        </div>\n    '
});

////////////////////////////////////////////////////////////////////////////////////////////////////////
// Register a new WebAuthn device
////////////////////////////////////////////////////////////////////////////////////////////////////////
function user_register_webauthn_device() {
    /**
     * convert RFC 1342-like base64 strings to array buffer
     * @param {mixed} obj
     * @returns {undefined}
     */
    function recursiveBase64StrToArrayBuffer(obj) {
        var prefix = '?BINARY?B?';
        var suffix = '?=';
        if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {
            for (var key in obj) {
                if (typeof obj[key] === 'string') {
                    var str = obj[key];
                    if (str.substring(0, prefix.length) === prefix && str.substring(str.length - suffix.length) === suffix) {
                        str = str.substring(prefix.length, str.length - suffix.length);

                        var binary_string = window.atob(str);
                        var len = binary_string.length;
                        var bytes = new Uint8Array(len);
                        for (var i = 0; i < len; i++) {
                            bytes[i] = binary_string.charCodeAt(i);
                        }
                        obj[key] = bytes.buffer;
                    }
                } else {
                    recursiveBase64StrToArrayBuffer(obj[key]);
                }
            }
        }
    }

    /**
     * Convert a ArrayBuffer to Base64
     * @param {ArrayBuffer} buffer
     * @returns {String}
     */
    function arrayBufferToBase64(buffer) {
        var binary = '';
        var bytes = new Uint8Array(buffer);
        var len = bytes.byteLength;
        for (var i = 0; i < len; i++) {
            binary += String.fromCharCode(bytes[i]);
        }
        return window.btoa(binary);
    }

    if (interfaceData.options.userHasTwofaRegistrations) return;
    if (!window.fetch || !navigator.credentials || !navigator.credentials.create) {
        $('#registerWebauthn').val(i18n('settings.user.manage.browserNotSupported'));
        $('#registerWebauthn').attr('disabled', 'disabled');
        return;
    }

    window.fetch('webauthnServer.php?command=getCredentialArgs', { method: 'GET', cache: 'no-cache' }).then(function (response) {
        return response.json();
    }).then(function (json) {
        recursiveBase64StrToArrayBuffer(json);
        return json;
    }).then(function (createCredentialArgs) {
        return navigator.credentials.create(createCredentialArgs);
    }).then(function (cred) {
        return {
            clientDataJson: cred.response.clientDataJSON ? arrayBufferToBase64(cred.response.clientDataJSON) : null,
            attestationObject: cred.response.attestationObject ? arrayBufferToBase64(cred.response.attestationObject) : null
        };
    }).then(JSON.stringify).then(function (AuthenticatorAttestationResponse) {
        return window.fetch('webauthnServer.php?command=registerDevice', { method: 'POST', body: AuthenticatorAttestationResponse, cache: 'no-cache' });
    }).then(function (response) {
        return response.json();
    }).then(function (json) {
        if (json.success) {
            $('#registerWebauthn').val(i18n('settings.user.manage.twofaRegistered'));
            $('#registerWebauthn').attr('disabled', 'disabled');
        } else {
            throw new Error(json.msg);
        }
    }).catch(function (error) {
        $('#registerWebauthn').val(error.message);
        $('#registerWebauthn').attr('disabled', 'disabled');
    });
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
var shading_windalarm = clone(shif_device);
shading_windalarm.template = '\n    <shif-generic-l2 v-bind:icon="cond.icon.name"\n                     v-bind:title="title"\n                     v-bind:active="{icon: cond.icon.color, text: cond.text.color}"\n                     v-bind:status="status_minimal()"\n                     v-bind:place="place">\n    </shif-generic-l2>\n';

shif_comps_create('shadingWindalarm', shading_windalarm, shading_windalarm);

////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
var shading_ventilation_l2 = clone(shif_device);
shading_ventilation_l2.methods.change = function (event) {
    homegear.value_set_clickcounter(this, this.output, !this.props.value);
};
shading_ventilation_l2.template = '\n    <shif-generic-l2 v-bind:icon="cond.icon.name"\n                     v-bind:title="dev.label"\n                     v-bind:active="{icon: cond.icon.color, text: cond.text.color}"\n                     v-bind:status="status"\n                     v-bind:place="place"\n                     v-bind:actions="true"\n                     v-on:click_icon="change"\n                     v-on:click="level3(device, breadcrumb)">\n    </shif-generic-l2>\n';

var shading_ventilation_l3 = clone(shif_device);
shading_ventilation_l3.methods.change = function (event) {
    homegear.value_set_clickcounter(this, this.output, !this.props.value);
};
shading_ventilation_l3.template = '\n    <shif-generic-l2 v-bind:icon="cond.icon.name"\n                     v-bind:title="title"\n                     v-bind:active="{icon: cond.icon.color, text: cond.text.color}"\n                     v-bind:place="place"\n                     v-bind:status="status_minimal()"\n                     v-bind:disabled="disabled"\n                     v-on:click="change">\n        <template v-slot:profiles>\n            <shif-checkbox-profiles v-bind:dev="dev"\n                                    v-bind:output="output"\n                                    v-bind:props="props" />\n        </template>\n    </shif-generic-l2>\n';

shif_comps_create('shadingVentilation', shading_ventilation_l2, shading_ventilation_l3);

var shading_slider = clone(shif_device);
shading_slider.methods.change = function (event) {
    homegear.value_set_clickcounter(this, this.output, this.props.value);
};
shading_slider.template = '\n    <shif-slider v-bind:min="props.minimumScaled"\n                 v-bind:max="props.maximumScaled"\n                 v-bind:unit="props.unit"\n                 v-bind:value="props.value"\n                 v-bind:title="title"\n                 v-bind:step=5\n                 v-bind:disabled="disabled"\n                 v-on:change="change"\n                 v-model:value="props.value">\n        <template v-slot:profiles>\n            <shif-checkbox-profiles v-bind:dev="dev"\n                                    v-bind:output="output"\n                                    v-bind:props="props" />\n        </template>\n    </shif-slider>\n';

shif_comps_create('shadingPosition', shading_ventilation_l2, shading_slider);
shif_comps_create('shadingPositionSlats', shading_ventilation_l2, shading_slider);

var shading_buttons_l2 = clone(shif_device);
shading_buttons_l2.template = '\n    <shif-generic-l2 v-bind:icon="icons.l2.name"\n                     v-bind:title="dev.label"\n                     v-bind:active="{icon: icons.l2.color, text: texts.title.color}"\n                     v-bind:place="place"\n                     v-bind:actions="true"\n                     v-bind:status="status"\n                     v-on:click="level3(device, breadcrumb)">\n\n        <template v-slot:favorites>\n            <shif-checkbox-favorites v-bind:dev="dev" />\n        </template>\n\n    </shif-generic-l2>\n';
var shading_buttons_l3 = clone(shif_device);
shading_buttons_l3.methods.change = function (event) {
    var upVar = this.control.variableOutputs[0];
    var downVar = this.control.variableOutputs[2];
    if ((this.indexes.input == 0 || this.indexes.input == 2) && !upVar.hasOwnProperty('value') && !downVar.hasOwnProperty('value') && upVar.peer == downVar.peer && upVar.channel == downVar.channel && upVar.name == downVar.name) {
        var down = this.indexes.input == 2;
        if ((this.output.type == 'integer' || this.output.type == 'integer64' || this.output.type == 'float') && this.output.hasOwnProperty('minimumValue') && this.output.hasOwnProperty('maximumValue')) {
            var output = clone(this.output);
            output.value = down ? this.output.maximumValue : this.output.minimumValue;
            homegear.value_set_clickcounter(this, output, null);
        } else if (this.output.type == 'bool') {
            var _output2 = clone(this.output);
            _output2.value = down;
            homegear.value_set_clickcounter(this, _output2, null);
        }
    } else homegear.value_set_clickcounter(this, this.output, true);
};
shading_buttons_l3.template = '\n    <div class="control_button_wrapper">\n        <shif-button v-bind:disabled="disabled"\n                     v-on:click="change">\n            <shif-icon v-bind:src="cond.icon.name"\n                        v-bind:active="cond.icon.color">\n            </shif-icon>\n        </shif-button>\n    </div>\n';

shif_comps_create('shadingButtons', shading_buttons_l2, shading_buttons_l3, shading_buttons_l3);
shif_comps_create('shadingButtonsSingleStep', shading_buttons_l2, shading_buttons_l3, shading_buttons_l3);
shif_comps_create('shadingButtonsUpDown', shading_buttons_l2, shading_buttons_l3, shading_buttons_l3);

////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
var window_rainalarm = clone(shif_device);
window_rainalarm.template = '\n    <shif-generic-l2 v-bind:icon="cond.icon.name"\n                     v-bind:title="title"\n                     v-bind:active="{icon: cond.icon.color, text: cond.text.color}"\n                     v-bind:status="status_minimal()"\n                     v-bind:place="place">\n    </shif-generic-l2>\n';

shif_comps_create('windowRainalarm', window_rainalarm, window_rainalarm);

////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
var window_status = clone(shif_device);
window_status.template = '\n    <shif-generic-l2 v-bind:icon="cond.icon.name"\n                     v-bind:title="dev.label"\n                     v-bind:active="{icon: cond.icon.color, text: cond.text.color}"\n                     v-bind:status="status"\n                     v-bind:place="place">\n    </shif-generic-l2>\n';

var window_status_l3 = clone(shif_device);
window_status_l3.template = '\n    <shif-generic-l2 v-bind:icon="cond.icon.name"\n                     v-bind:title="title"\n                     v-bind:active="{icon: cond.icon.color, text: cond.text.color}"\n                     v-bind:status="status_minimal()"\n                     v-bind:place="place">\n\n        <template v-slot:favorites>\n            <shif-checkbox-favorites v-bind:dev="dev" />\n        </template>\n\n    </shif-generic-l2>\n';

shif_comps_create('windowContact', window_status, window_status_l3);
shif_comps_create('windowHandle', window_status, window_status_l3);

var window_buttons_l2 = clone(shif_device);
window_buttons_l2.template = '\n    <shif-generic-l2 v-bind:icon="icons.l2.name"\n                     v-bind:title="dev.label"\n                     v-bind:active="{icon: icons.l2.color, text: texts.title.color}"\n                     v-bind:place="place"\n                     v-bind:actions="true"\n                     v-bind:status="status"\n                     v-on:click="level3(device, breadcrumb)">\n\n        <template v-slot:favorites>\n            <shif-checkbox-favorites v-bind:dev="dev" />\n        </template>\n\n    </shif-generic-l2>\n';
var window_buttons_l3 = clone(shif_device);
window_buttons_l3.methods.change = function (event) {
    var upVar = this.control.variableOutputs[0];
    var downVar = this.control.variableOutputs[2];
    if ((this.indexes.input == 0 || this.indexes.input == 2) && !upVar.hasOwnProperty('value') && !downVar.hasOwnProperty('value') && upVar.peer == downVar.peer && upVar.channel == downVar.channel && upVar.name == downVar.name) {
        var down = this.indexes.input == 2;
        if ((this.output.type == 'integer' || this.output.type == 'integer64' || this.output.type == 'float') && this.output.hasOwnProperty('minimumValue') && this.output.hasOwnProperty('maximumValue')) {
            var output = clone(this.output);
            output.value = down ? this.output.maximumValue : this.output.minimumValue;
            homegear.value_set_clickcounter(this, output, null);
        } else if (this.output.type == 'bool') {
            var _output3 = clone(this.output);
            _output3.value = down;
            homegear.value_set_clickcounter(this, _output3, null);
        }
    } else homegear.value_set_clickcounter(this, this.output, true);
};
window_buttons_l3.template = '\n    <div>\n        <div class="control_button_wrapper">\n            <shif-button v-bind:disabled="disabled"\n                         v-on:click="change">\n                <shif-icon v-bind:src="cond.icon.name"\n                           v-bind:active="cond.icon.color">\n                </shif-icon>\n            </shif-button>\n        </div>\n    </div>\n';

shif_comps_create('windowButtonsUpDown', window_buttons_l2, window_buttons_l3);
shif_comps_create('windowButtons', window_buttons_l2, window_buttons_l3);

var window_slider = clone(shif_device);
window_slider.methods.change = function (event) {
    homegear.value_set_clickcounter(this, this.output, this.props.value);
};
window_slider.provides = function () {
    return {
        checkbox_wanted: true
    };
}, window_slider.template = '\n    <shif-slider v-bind:min="props.minimumScaled"\n                 v-bind:max="props.maximumScaled"\n                 v-bind:unit="props.unit"\n                 v-bind:value="props.value"\n                 v-bind:title="title"\n                 v-bind:step=5\n                 v-bind:disabled="disabled"\n                 v-on:change="change"\n                 v-model:value="props.value">\n    </shif-slider>\n';

shif_comps_create('windowPosition', window_buttons_l2, window_slider);

////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
var door_status = clone(shif_device);
door_status.template = '\n    <shif-generic-l2 v-bind:icon="cond.icon.name"\n                     v-bind:title="dev.label"\n                     v-bind:active="{icon: cond.icon.color, text: cond.text.color}"\n                     v-bind:status="status_minimal()"\n                     v-bind:place="place">\n\n        <template v-slot:favorites>\n            <shif-checkbox-favorites v-bind:dev="dev" />\n        </template>\n\n    </shif-generic-l2>\n';

shif_comps_create('doorContact', door_status, door_status);
shif_comps_create('doorHandle', door_status, door_status);
shif_comps_create('doorLock', door_status, door_status);

////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
var lighting_switch_l2 = clone(shif_device);
lighting_switch_l2.methods.change = function (event) {
    homegear.value_set_clickcounter(this, this.output, !this.props.value);
};
lighting_switch_l2.template = '\n    <shif-generic-l2 v-bind:icon="cond.icon.name"\n                     v-bind:title="dev.label"\n                     v-bind:active="{icon: cond.icon.color, text: cond.text.color}"\n                     v-bind:status="status"\n                     v-bind:place="place"\n                     v-bind:actions="true"\n                     v-on:click_icon="change($event, true)"\n                     v-on:click="level3(device, breadcrumb)">\n\n        <template v-slot:favorites>\n            <shif-checkbox-favorites v-bind:dev="dev" />\n        </template>\n\n    </shif-generic-l2>\n';

var lighting_switch_l3 = clone(shif_device);
lighting_switch_l3.methods.change = function (event) {
    homegear.value_set_clickcounter(this, this.output, !this.props.value);
};
lighting_switch_l3.template = '\n    <shif-generic-l2 v-bind:icon="cond.icon.name"\n                     v-bind:title="title"\n                     v-bind:active="{icon: cond.icon.color, text: cond.text.color}"\n                     v-bind:place="place"\n                     v-bind:status="status_minimal()"\n                     v-on:click="change">\n\n        <template v-slot:favorites>\n            <shif-checkbox-favorites v-bind:dev="dev" />\n        </template>\n\n        <template v-slot:profiles>\n            <shif-checkbox-profiles v-bind:dev="dev"\n                                    v-bind:output="output"\n                                    v-bind:props="props" />\n        </template>\n\n    </shif-generic-l2>\n';

shif_comps_create('lightingSwitch', lighting_switch_l2, lighting_switch_l3);

var lighting_brightness = clone(shif_device);
lighting_brightness.methods.change = function (event) {
    homegear.value_set_clickcounter(this, this.output, this.props.value);
};
lighting_brightness.template = '\n    <shif-slider v-bind:min="props.minimumScaled"\n                 v-bind:max="props.maximumScaled"\n                 v-bind:unit="props.unit"\n                 v-bind:value="props.value"\n                 v-bind:title="title"\n                 v-bind:step=5\n                 v-on:change="change"\n                 v-model:value="props.value">\n\n        <template v-slot:profiles>\n            <shif-checkbox-profiles v-bind:dev="dev"\n                                    v-bind:output="output"\n                                    v-bind:props="props" />\n        </template>\n    </shif-slider>\n';

shif_comps_create('lightingBrightness', lighting_switch_l2, lighting_brightness);
shif_comps_create('lightingSpeed', lighting_switch_l2, lighting_brightness);

var lighting_button_l2 = clone(shif_device);
lighting_button_l2.template = '\n    <shif-generic-l2 v-bind:icon="cond.icon.name"\n                     v-bind:title="dev.label"\n                     v-bind:active="{icon: cond.icon.color, text: cond.text.color}"\n                     v-bind:status="status"\n                     v-bind:place="place"\n                     v-on:click="level3(device, breadcrumb)">\n    </shif-generic-l2>\n';

var lighting_button_l3 = clone(shif_device);
lighting_button_l3.methods.change = function (event, down) {
    homegear.value_set_clickcounter(this, this.output, down);
};
lighting_button_l3.template = '\n    <shif-generic-l2 v-bind:icon="cond.icon.name"\n                     v-bind:title="title"\n                     v-bind:active="{icon: cond.icon.color, text: cond.text.color}"\n                     v-bind:status="status_minimal()"\n                     v-bind:place="place"\n                     v-on:mousedown="change($event, true)"\n                     v-on:mouseup="change($event, false)">\n    </shif-generic-l2>\n';

shif_comps_create('lightingButton', lighting_button_l2, lighting_button_l3);
shif_comps_create('refresh', lighting_button_l2, lighting_button_l3);

var lighting_color_l2 = clone(shif_device);
lighting_color_l2.template = '\n    <shif-generic-l2 v-bind:icon="cond.icon.name"\n                     v-bind:title="dev.label"\n                     v-bind:active="{icon: cond.icon.color, text: cond.text.color}"\n                     v-bind:status="status"\n                     v-bind:place="place"\n                     v-on:click="level3(device, breadcrumb)">\n    </shif-generic-l2>\n';

var lighting_color_l3 = clone(shif_device);
lighting_color_l3.methods.change = function (event) {
    this.props.value = event;
    homegear.value_set_clickcounter(this, this.output, this.props.value);
};
lighting_color_l3.template = '\n    <shif-colorpicker v-bind:width="{max_pixels: 600, percent: 100}"\n                      v-bind:height="{max_pixels: 620, percent: 100}"\n                      v-bind:color="props.value"\n                      v-bind:title="title"\n                      v-on:input="change">\n\n        <template v-slot:profiles>\n            <shif-checkbox-profiles v-bind:dev="dev"\n                                    v-bind:output="output"\n                                    v-bind:props="props" />\n        </template>\n\n    </shif-colorpicker>\n';

shif_comps_create('lightingColor', lighting_color_l2, lighting_color_l3);

////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
var lighting_function_l2 = clone(shif_device);
lighting_function_l2.template = '\n    <shif-generic-l2 v-bind:icon="icons.l2.name"\n                     v-bind:title="dev.label"\n                     v-bind:active="{icon: icons.l2.color, text: texts.title.color}"\n                     v-bind:place="place"\n                     v-bind:actions="true"\n                     v-bind:status="status"\n                     v-on:click="level3(device, breadcrumb)">\n    </shif-generic-l2>\n';

var lighting_function_l3 = clone(shif_device);
lighting_function_l3.methods.change = function (x) {
    homegear.value_set_clickcounter(this, this.output, x);
};
lighting_function_l3.computed.values = function () {
    return this.rendering.map(function (x) {
        return {
            name: x.definitions.texts.state.content,
            value: x.condition.value
        };
    });
};
lighting_function_l3.template = '\n    <shif-dropdown v-bind:title="title"\n                   v-bind:values="values"\n                   v-bind:selected="props.value"\n                   v-on:change="x => change(parseInt(x))">\n        <template v-slot:profiles>\n            <shif-checkbox-profiles v-bind:dev="dev"\n                                    v-bind:output="output"\n                                    v-bind:props="props" />\n        </template>\n    </shif-dropdown>\n';

shif_comps_create('lightingFunction', lighting_function_l2, lighting_function_l3);

////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
var socket_switch_l2 = clone(shif_device);
socket_switch_l2.methods.change = function (event) {
    homegear.value_set_clickcounter(this, this.output, !this.props.value);
};
socket_switch_l2.template = '\n    <shif-generic-l2 v-bind:icon="cond.icon.name"\n                     v-bind:title="dev.label"\n                     v-bind:active="{icon: cond.icon.color, text: cond.text.color}"\n                     v-bind:status="status"\n                     v-bind:place="place"\n                     v-bind:actions="true"\n                     v-on:click_icon="change"\n                     v-on:click="level3(device, breadcrumb)">\n        <template v-slot:profiles>\n            <shif-checkbox-profiles v-bind:dev="dev"\n                                    v-bind:output="output"\n                                    v-bind:props="props" />\n        </template>\n    </shif-generic-l2>\n';

var socket_switch_l3 = clone(shif_device);
socket_switch_l3.methods.change = function (event) {
    homegear.value_set_clickcounter(this, this.output, !this.props.value);
};
socket_switch_l3.template = '\n    <shif-generic-l2 v-bind:icon="cond.icon.name"\n                     v-bind:title="title"\n                     v-bind:active="{icon: cond.icon.color, text: cond.text.color}"\n                     v-bind:place="place"\n                     v-bind:status="status_minimal()"\n                     v-on:click="change">\n\n        <template v-slot:favorites>\n            <shif-checkbox-favorites v-bind:dev="dev" />\n        </template>\n\n        <template v-slot:profiles>\n            <shif-checkbox-profiles v-bind:dev="dev"\n                                    v-bind:output="output"\n                                    v-bind:props="props" />\n        </template>\n\n    </shif-generic-l2>\n';

shif_comps_create('socketSwitch', socket_switch_l2, socket_switch_l3);

var socket_button_l2 = clone(shif_device);
socket_button_l2.template = '\n    <shif-generic-l2 v-bind:icon="cond.icon.name"\n                     v-bind:title="dev.label"\n                     v-bind:active="{icon: cond.icon.color, text: cond.text.color}"\n                     v-bind:status="status"\n                     v-bind:place="place"\n                     v-on:click="level3(device, breadcrumb)">\n    </shif-generic-l2>\n';

var socket_button_l3 = clone(shif_device);
socket_button_l3.methods.change = function (event, down) {
    homegear.value_set_clickcounter(this, this.output, down);
};
socket_button_l3.template = '\n    <shif-generic-l2 v-bind:icon="cond.icon.name"\n                     v-bind:title="title"\n                     v-bind:active="{icon: cond.icon.color, text: cond.text.color}"\n                     v-bind:status="status_minimal()"\n                     v-bind:place="place"\n                     v-on:mousedown="change($event, true)"\n                     v-on:mouseup="change($event, false)">\n\n        <template v-slot:favorites>\n            <shif-checkbox-favorites v-bind:dev="dev" />\n        </template>\n\n    </shif-generic-l2>\n';

shif_comps_create('socketButton', socket_button_l2, socket_button_l3);

////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
function status_format(status, precision) {
    var _this8 = this;

    if (typeof status === 'string') {
        var regex = /^(\d+(?:[\.,]\d+)?)/;
        return status.replace(regex, function (match) {
            return _this8.float_formatted(match, precision);
        });
    }

    var _iteratorNormalCompletion6 = true;
    var _didIteratorError6 = false;
    var _iteratorError6 = undefined;

    try {
        for (var _iterator6 = status[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
            var cur = _step6.value;

            cur.value = status_format.apply(this, [cur.value, precision]);
        }
    } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion6 && _iterator6.return) {
                _iterator6.return();
            }
        } finally {
            if (_didIteratorError6) {
                throw _iteratorError6;
            }
        }
    }

    return status;
}

var climate_main = clone(shif_device);
climate_main.computed.status_formatted = function () {
    return status_format.apply(this, [this.status_minimal(false), 1]);
};
climate_main.computed.icon = function () {
    return 'main' in this.icons ? this.icons.main : this.control.icons.main;
};
climate_main.template = '\n    <shif-generic-l2 v-bind:icon="icon.name"\n                     v-bind:title="title"\n                     v-bind:active="{icon: icon.color, text: texts.title.color}"\n                     v-bind:status="status_formatted"\n                     v-bind:place="place">\n\n        <template v-slot:favorites>\n            <shif-checkbox-favorites v-bind:dev="dev" />\n        </template>\n\n    </shif-generic-l2>\n';

var openweathermap_l2 = clone(shif_device);
openweathermap_l2.computed.status_formatted = function () {
    return status_format.apply(this, [this.status, 1]);
};
openweathermap_l2.template = '\n    <shif-generic-l2 v-bind:icon="icons.weather.name"\n                     v-bind:title="dev.label"\n                     v-bind:active="{icon: icons.weather.color, text: texts.title.color}"\n                     v-bind:status="status_formatted"\n                     v-bind:place="place"\n                     v-bind:actions="true"\n                     v-on:click="level3(device, breadcrumb)">\n\n        <template v-slot:favorites>\n            <shif-checkbox-favorites v-bind:dev="dev" />\n        </template>\n\n    </shif-generic-l2>\n';

shif_comps_create('humidity', openweathermap_l2, climate_main);
shif_comps_create('temperature', openweathermap_l2, climate_main);
shif_comps_create('climateCity', openweathermap_l2, climate_main);
shif_comps_create('climateCloudcoverage', openweathermap_l2, climate_main);
shif_comps_create('climateDate', openweathermap_l2, climate_main);
shif_comps_create('climatePressure', openweathermap_l2, climate_main);
shif_comps_create('climateRain3h', openweathermap_l2, climate_main);
shif_comps_create('climateSnow3h', openweathermap_l2, climate_main);
shif_comps_create('climateSunrise', openweathermap_l2, climate_main);
shif_comps_create('climateSunset', openweathermap_l2, climate_main);
shif_comps_create('climateWeather', openweathermap_l2, climate_main);
shif_comps_create('climateWinddirection', openweathermap_l2, climate_main);
shif_comps_create('climateWindgust', openweathermap_l2, climate_main);
shif_comps_create('climateWindspeed', openweathermap_l2, climate_main);
// shif_comps_create('OpenWeatherMap',    openweathermap_l2, openweathermap_l2);

////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
var heating_slider_l2 = clone(shif_device);
heating_slider_l2.methods.change = function (event) {
    homegear.value_set_clickcounter(this, this.output, !this.props.value);
};
heating_slider_l2.template = '\n    <shif-generic-l2 v-bind:icon="cond.icon.name"\n                     v-bind:title="dev.label"\n                     v-bind:active="{icon: cond.icon.color, text: cond.text.color}"\n                     v-bind:status="status"\n                     v-bind:place="place"\n                     v-bind:actions="true"\n                     v-on:click_icon="change"\n                     v-on:click="level3(device, breadcrumb)">\n    </shif-generic-l2>\n';
var heating_slider_l3 = clone(shif_device);
heating_slider_l3.methods.change = function (event) {
    homegear.value_set_clickcounter(this, this.output, this.props.value);
};
heating_slider_l3.template = '\n    <shif-slider v-bind:min="props.minimumScaled"\n                 v-bind:max="parseFloat(props.maximumScaled)"\n                 v-bind:unit="props.unit"\n                 v-bind:value="props.value"\n                 v-bind:title="title"\n                 v-bind:step="0.5"\n                 v-bind:precision="1"\n                 v-on:change="change"\n                 v-bind:disabled="disabled"\n                 v-model:value="props.value">\n        <template v-slot:profiles>\n            <shif-checkbox-profiles v-bind:dev="dev"\n                                    v-bind:output="output"\n                                    v-bind:props="props" />\n        </template>\n    </shif-slider>\n';

shif_comps_create('heatingSlider', heating_slider_l2, heating_slider_l3);

var heating_is_state_l2 = clone(shif_device);
heating_is_state_l2.template = '\n    <shif-generic-l2 v-bind:icon="control.icons.temperature.name"\n                     v-bind:title="dev.label"\n                     v-bind:active="{icon: control.icons.temperature.color, text: texts.title.color}"\n                     v-bind:status="status"\n                     v-bind:actions="true"\n                     v-bind:place="place"\n                     v-on:click="level3(device, breadcrumb)">\n\n        <template v-slot:favorites>\n            <shif-checkbox-favorites v-bind:dev="dev" />\n        </template>\n\n    </shif-generic-l2>\n';
var heating_is_state_l3 = clone(shif_device);
heating_is_state_l3.template = '\n    <shif-generic-l2 v-bind:icon="control.icons.temperature.name"\n                     v-bind:title="title"\n                     v-bind:active="{icon: control.icons.temperature.color, text: texts.title.color}"\n                     v-bind:status="status"\n                     v-bind:place="place">\n    </shif-generic-l2>\n';

shif_comps_create('heatingIsState', heating_is_state_l2, heating_is_state_l3);

var heating_mode_l3 = clone(shif_device);
heating_mode_l3.computed.values = function () {
    var _this9 = this;

    return this.rendering.map(function (x) {
        return {
            name: x.definitions.texts.state.content,
            value: x.condition.value,
            selected: x.condition.value == _this9.props.value
        };
    });
};
heating_mode_l3.methods.change = function (x) {
    homegear.value_set_clickcounter(this, this.output, x);
};
heating_mode_l3.template = '\n    <shif-radio v-bind:title="title"\n                v-bind:values="values"\n                v-bind:disabled="disabled"\n                v-on:input="x => change(parseInt(x))">\n        <template v-slot:profiles>\n            <shif-checkbox-profiles v-bind:dev="dev"\n                                    v-bind:output="output"\n                                    v-bind:props="props" />\n        </template>\n    </shif-radio>\n';

shif_comps_create('heatingMode', heating_is_state_l2, heating_mode_l3);

var heating_window = clone(shif_device);
heating_window.template = '\n    <shif-generic-l2 v-bind:icon="cond.icon.name"\n                     v-bind:title="title"\n                     v-bind:active="{icon: cond.icon.color, text: cond.text.color}"\n                     v-bind:status="status_minimal()"\n                     v-bind:place="place">\n    </shif-generic-l2>\n';

shif_comps_create('heatingWindow', heating_window, heating_window);

////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
var ventilation_mode_l2 = clone(shif_device);
ventilation_mode_l2.template = '\n    <shif-generic-l2 v-bind:icon="icons.l2.name"\n                     v-bind:title="dev.label"\n                     v-bind:active="{icon: icons.l2.color, text: texts.title.color}"\n                     v-bind:place="place"\n                     v-bind:actions="true"\n                     v-bind:status="status"\n                     v-on:click="level3(device, breadcrumb)">\n\n        <template v-slot:favorites>\n            <shif-checkbox-favorites v-bind:dev="dev" />\n        </template>\n\n    </shif-generic-l2>\n';

var ventilation_mode_l3 = clone(shif_device);
ventilation_mode_l3.methods.change = function (x) {
    homegear.value_set_clickcounter(this, this.output, x);
};
ventilation_mode_l3.computed.values = function () {
    var _this10 = this;

    return this.rendering.map(function (x) {
        return {
            name: x.definitions.texts.state.content,
            value: x.condition.value,
            selected: x.condition.value == _this10.props.value
        };
    });
};
ventilation_mode_l3.template = '\n    <shif-radio v-bind:title="title"\n                v-bind:values="values"\n                v-on:input="x => change(parseInt(x))">\n        <template v-slot:profiles>\n            <shif-checkbox-profiles v-bind:dev="dev"\n                                    v-bind:output="output"\n                                    v-bind:props="props" />\n        </template>\n    </shif-radio>\n';

shif_comps_create('ventilationMode', ventilation_mode_l2, ventilation_mode_l3);

var timer_l2 = clone(shif_device);
timer_l2.template = '\n    <shif-generic-l2 v-bind:icon="cond.icon.name"\n                     v-bind:title="dev.label"\n                     v-bind:active="{icon: cond.icon.color, text: cond.text.color}"\n                     v-bind:status="status"\n                     v-bind:place="place"\n                     v-bind:actions="true"\n                     v-on:click="level3(device, breadcrumb)">\n    </shif-generic-l2>\n';

var timer_l3 = clone(shif_device);
timer_l3.methods.change = function (event) {
    homegear.value_set_clickcounter(this, this.output, !this.props.value);
};

timer_l3.template = '\n    <form>\n        <div class="timer_wrapper">\n            <div>\n                <input type="time" name="time">\n            </div>\n            <div>\n                <select name="sun">\n                    <option value="false">-</option>\n                    <option value="sa">Sonnenaufgang</option>\n                    <option value="su">Sonnenuntergang</option>\n                </select>\n            </div>\n            <div>\n                <select name="state">\n                    <option value="false">off</option>\n                    <option value="true">on</option>\n                </select>\n            </div>\n            <div style="max-width: 456px;">\n                <select class="select_day" name="day" multiple>\n                    <option value="1">Mo.</option>\n                    <option value="2">Di.</option>\n                    <option value="3">Mi.</option>\n                    <option value="4">Do.</option>\n                    <option value="5">Fr.</option>\n                    <option value="6">Sa.</option>\n                    <option value="7">So.</option>\n                </select>\n            </div>\n            <div>\n                <select name="activ">\n                    <option value="false">inactive</option>\n                    <option value="true">active</option>\n                </select>\n            </div>\n            <div>\n                <input type="submit" name="submit" value="speichern">\n            </div>\n        </div>\n    </form>\n';

shif_comps_create('timer', timer_l2, timer_l3);

var media_buttons_l2 = clone(shif_device);
media_buttons_l2.template = '\n    <shif-generic-l2 v-bind:icon="icons.l2.name"\n                     v-bind:title="dev.label"\n                     v-bind:active="{icon: icons.l2.color, text: texts.title.color}"\n                     v-bind:place="place"\n                     v-bind:actions="true"\n                     v-bind:status="status"\n                     v-on:click="level3(device, breadcrumb)">\n\n        <template v-slot:favorites>\n            <shif-checkbox-favorites v-bind:dev="dev" />\n        </template>\n    </shif-generic-l2>\n';

var media_buttons_l3 = clone(shif_device);
media_buttons_l3.methods.change = function (event) {
    var upVar = this.control.variableOutputs[0];
    var downVar = this.control.variableOutputs[2];
    if ((this.indexes.input == 0 || this.indexes.input == 2) && !upVar.hasOwnProperty('value') && !downVar.hasOwnProperty('value') && upVar.peer == downVar.peer && upVar.channel == downVar.channel && upVar.name == downVar.name) {
        var down = this.indexes.input == 2;
        if ((this.output.type == 'integer' || this.output.type == 'integer64' || this.output.type == 'float') && this.output.hasOwnProperty('minimumValue') && this.output.hasOwnProperty('maximumValue')) {
            var output = clone(this.output);
            output.value = down ? this.output.maximumValue : this.output.minimumValue;
            homegear.value_set_clickcounter(this, output, null);
        } else if (this.output.type == 'bool') {
            var _output4 = clone(this.output);
            _output4.value = down;
            homegear.value_set_clickcounter(this, _output4, null);
        }
    } else homegear.value_set_clickcounter(this, this.output, true);
};

media_buttons_l3.template = '\n    <div class="control_button_wrapper">\n        <shif-button v-bind:disabled="disabled"\n                     v-on:click="change">\n            <shif-icon v-bind:src="cond.icon.name"\n                        v-bind:active="cond.icon.color">\n            </shif-icon>\n        </shif-button>\n    </div>\n';

shif_comps_create('mediaButtons', media_buttons_l2, media_buttons_l3);

Vue.component('shif-ctrl-summary', {
    mixins: [mixin_components, mixin_profiles, mixin_print_mounted()],

    props: ['icon', 'title', 'status', 'actions', 'devs', 'role_id'],

    data: function data() {
        return {
            submenu_show: false
        };
    },

    computed: {
        dev_objs: function dev_objs() {
            var _this11 = this;

            return this.devs.map(function (x) {
                return _this11.find_component(_this11.interfaceData.devices[x], 'l2');
            });
        },

        profiles_by_role: function profiles_by_role() {
            return this.role_profiles(this.role_id);
        }
    },

    provide: function provide() {
        return {
            layer: 2
        };
    },

    methods: {
        toggle_all: function toggle_all(action) {
            var _this12 = this;

            var varInRole = 'roleId' in action ? this.interfaceData.roles[action.roleId].varInRole : this.interfaceData.roles[this.role_id].varInRole;

            var ops = [];
            for (var peer in varInRole) {
                for (var channel in varInRole[peer]) {
                    for (var name in varInRole[peer][channel]) {
                        var cur = varInRole[peer][channel][name];

                        if ('direction' in cur && cur.direction === 0) continue;

                        if (!(peer in this.interfaceData.map_invoke && channel in this.interfaceData.map_invoke[peer] && name in this.interfaceData.map_invoke[peer][channel])) continue;
                        var devs = this.interfaceData.map_invoke[peer][channel][name];

                        var disabled = devs.some(function (dev) {
                            var device = _this12.interfaceData.devices[dev.databaseId];
                            var control = device.controls[dev.control];

                            for (var i in control.variableInputs) {
                                if (check_disabled(device, { control: dev.control, input: i }).flag) return true;
                            }

                            return false;
                        });

                        if (!disabled) ops.push({
                            input: { peer: peer, channel: channel, name: name },
                            value: action.value
                        });
                    }
                }
            }this.$homegear.value_set_multi(ops);
        },

        get_icon_or_default: function get_icon_or_default(profile) {
            return get_or_default(profile, 'icon', 'slider_1');
        }
    },

    template: '\n        <div>\n            <shif-generic-l2 v-bind:icon="icon"\n                             v-bind:icon_rotate="submenu_show"\n                             v-bind:title="title"\n                             v-bind:status="status"\n                             v-bind:actions="true"\n                             v-bind:accordion="true"\n                             v-on:click="submenu_show = !submenu_show"\n                             class="accordion">\n            </shif-generic-l2>\n\n            <shif-trans-drop-down>\n                <div v-if="submenu_show"\n                     class="categoryContainer"\n                     style="margin-top: 15px;">\n\n                    <div class="control_button_wrapper">\n                        <template v-for="action in actions">\n                            <shif-button v-bind:width="(100 / actions.length) + \'%\'"\n                                         v-on:click="toggle_all(action)">\n                                {{ action.buttonText }}\n                            </shif-button>\n                        </template>\n                    </div>\n\n                    <div class="profiles_wrapper">\n                        <template v-for="i in profiles_by_role">\n                            <shif-generic-l2 v-bind:icon="get_icon_or_default(i)"\n                                             v-bind:title="i.name"\n                                             v-bind:status="i18n(\'modemenu.profiles.name.label\')"\n                                             v-bind:active="{icon: i.isActive ? \'active\' : \'\'}"\n                                             v-on:click="profile_start(i)">\n                            </shif-generic-l2>\n                        </template>\n                    </div>\n\n                    <template v-for="dev in dev_objs">\n                        <component v-bind="dev" v-bind:include_place="true" />\n\n                        <template v-if="debug">\n                            {{ dev | pretty | log }}\n                        </template>\n                    </template>\n                </div>\n            </shif-trans-drop-down>\n        </div>\n    '
});

var ShifAllDevices = {
    mixins: [mixin_print_mounted()],

    data: function data() {
        var states = {};

        /**
         * Initialize the states so that the status component can show an empty
         * status line without error.
         **/
        var _iteratorNormalCompletion7 = true;
        var _didIteratorError7 = false;
        var _iteratorError7 = undefined;

        try {
            for (var _iterator7 = Object.keys(interfaceData.roles).map(Number)[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                var key = _step7.value;

                states[key] = [];
            }
        } catch (err) {
            _didIteratorError7 = true;
            _iteratorError7 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion7 && _iterator7.return) {
                    _iterator7.return();
                }
            } finally {
                if (_didIteratorError7) {
                    throw _iteratorError7;
                }
            }
        }

        return {
            status_initialized: false,
            states: states
        };
    },

    computed: {
        map_roles_devs: function map_roles_devs() {
            var ret = {};

            for (var dev_idx in interfaceData.devices) {
                var dev = interfaceData.devices[dev_idx];
                if (!('role' in dev)) continue;

                var role = dev.role;
                if (!(role in ret)) ret[role] = [];

                if (ret[role].indexOf(dev_idx) === -1) ret[role].push(dev_idx);
            }

            return ret;
        }
    },

    methods: {
        status_gather_invokes: function status_gather_invokes(role, role_id) {
            var ret = [{
                type: get_or_default(role, 'aggregationType', 2),
                ids: [{ 'id': role_id, 'direction': 0 }]
            }];

            if (!('rolesInclude' in role)) return ret;

            var _iteratorNormalCompletion8 = true;
            var _didIteratorError8 = false;
            var _iteratorError8 = undefined;

            try {
                for (var _iterator8 = role.rolesInclude[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                    var role_inc = _step8.value;

                    var ids = [];
                    for (var index in role_inc.roles) {
                        ids.push({ 'id': role_inc.roles[index], 'direction': 0 });
                    }

                    ret.push({
                        type: get_or_default(role_inc, 'aggregationType', 2),
                        ids: ids
                    });
                }
            } catch (err) {
                _didIteratorError8 = true;
                _iteratorError8 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion8 && _iterator8.return) {
                        _iterator8.return();
                    }
                } finally {
                    if (_didIteratorError8) {
                        throw _iteratorError8;
                    }
                }
            }

            return ret;
        },

        status_text: function status_text(role, texts_idx) {
            if (!('texts' in role)) return '?';

            if (typeof texts_idx === 'number' && role.texts.length > texts_idx || typeof texts_idx === 'string' && texts_idx in role.texts) return role.texts[texts_idx];

            if (role.texts.length == 1) return role.texts[0];

            return '?';
        },

        status: function status(role_id) {
            var _this13 = this;

            var role = interfaceData.roles[role_id];
            var invokes_descs = this.status_gather_invokes(role, role_id);

            if ('l2_status' in role) {
                this.states[role_id] = [];
                return;
            }

            var _iteratorNormalCompletion9 = true;
            var _didIteratorError9 = false;
            var _iteratorError9 = undefined;

            try {
                for (var _iterator9 = invokes_descs[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                    var invoke_desc = _step9.value;

                    this.$homegear.invoke({
                        jsonrpc: '2.0',
                        method: 'aggregateRoles',
                        params: [invoke_desc.type, invoke_desc.ids, []]
                    }, function (res) {
                        /**
                         * Updating this is a two step process:
                         * 1) We need to fetch the new values from upstream.
                         * 2) We need to zero out the outdated old values.
                         **/
                        var keys = Object.keys(res.result).filter(function (x) {
                            return x !== 'variableCount';
                        });
                        var _iteratorNormalCompletion10 = true;
                        var _didIteratorError10 = false;
                        var _iteratorError10 = undefined;

                        try {
                            for (var _iterator10 = keys[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                                var key = _step10.value;

                                /**
                                 * We have to be very careful here, to not break Vue's
                                 * reactiveness.
                                 * 1) In case we need to insert a value, push is needed.
                                 * 2) In case we need to change a value, direct
                                 *    assignment of the single object members at
                                 *    respective array index is needed.
                                 **/
                                for (var i = 0; i < _this13.states[role_id].length; ++i) {
                                    if (_this13.states[role_id][i].raw == key) {
                                        set_or_extend(_this13.states[role_id], i, {
                                            key: _this13.status_text(role, key),
                                            value: res.result[key],
                                            raw: key
                                        });
                                        break;
                                    }
                                }
                            }
                        } catch (err) {
                            _didIteratorError10 = true;
                            _iteratorError10 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion10 && _iterator10.return) {
                                    _iterator10.return();
                                }
                            } finally {
                                if (_didIteratorError10) {
                                    throw _iteratorError10;
                                }
                            }
                        }

                        for (var j = _this13.states[role_id].length - 1; j >= 0; --j) {
                            if (keys.indexOf(_this13.states[role_id][j].raw) === -1) _this13.states[role_id][j].value = 0;
                        }
                    });
                }
            } catch (err) {
                _didIteratorError9 = true;
                _iteratorError9 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion9 && _iterator9.return) {
                        _iterator9.return();
                    }
                } finally {
                    if (_didIteratorError9) {
                        throw _iteratorError9;
                    }
                }
            }
        },

        states_clean: function states_clean(role_id) {
            return this.states[role_id];

            // return this.states[role_id].some(x => x.value !== 0)
            // ? this.states[role_id]
            // : [];
        },

        role_update_handle: function role_update_handle(role_id) {
            return this.status(Number(role_id));
        }
    },

    mounted: function mounted() {
        var _iteratorNormalCompletion11 = true;
        var _didIteratorError11 = false;
        var _iteratorError11 = undefined;

        try {
            for (var _iterator11 = Object.keys(interfaceData.roles).map(Number)[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
                var key = _step11.value;

                var role = interfaceData.roles[key];

                if (!('texts' in role)) continue;

                /**
                 * Always reinitialize to an empty array here.
                 * In case of a homegear reconnect, we would duplicate the
                 * status text otherwise.
                 **/
                this.states[key] = [];
                /**
                 * This must be a for-in loop! Do not change it into a
                 * traditional for loop or a map.
                 * We need iterate over both, integer keys, as well as object
                 * keys (iteration order does not matter for the integer keys).
                 **/
                for (var text_idx in role.texts) {
                    this.states[key].push({
                        key: this.status_text(role, text_idx),
                        raw: text_idx + '',
                        value: 0
                    });
                }this.status(key);
            }
        } catch (err) {
            _didIteratorError11 = true;
            _iteratorError11 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion11 && _iterator11.return) {
                    _iterator11.return();
                }
            } finally {
                if (_didIteratorError11) {
                    throw _iteratorError11;
                }
            }
        }

        this.$root.$on('role-update', this.role_update_handle);
    },

    beforeDestroy: function beforeDestroy() {
        this.$root.$off('role-update', this.role_update_handle);
    },

    template: '\n        <div>\n            <template v-for="(devs, role) in map_roles_devs">\n                <template v-if="role in interfaceData.roles">\n                    <shif-ctrl-summary\n                        v-bind:actions="interfaceData.roles[role].invokeOutputs"\n                        v-bind:icon="interfaceData.roles[role].icon"\n                        v-bind:title="interfaceData.roles[role].name"\n                        v-bind:devs="devs"\n                        v-bind:role_id="role"\n                        v-bind:status="states_clean(role)">\n                    </shif-ctrl-summary>\n                </template>\n                <template v-else>\n                    {{ "This role is not defined: " + role | log }}\n                </template>\n            </template>\n        </div>\n    '
};

var ShifHouseDevices = {
    mixins: [mixin_print_mounted('shif-house-devices')],

    components: {
        ShifAllDevices: ShifAllDevices
    },

    template: '\n        <shif-mainmenu-tabs>\n            <shif-all-devices />\n        </shif-mainmenu-tabs>\n    '
};

var ShifAllDevicesLvl3 = {
    mixins: [mixin_print_mounted('shif-all-devices-level-3')],

    template: '\n        <shif-house-collected-entries v-bind:layer="3" />\n    '
};

var ShifFavoritesLvl3 = {
    mixins: [mixin_print_mounted('shif-favorites-level-3')],

    template: '\n        <shif-house-collected-entries v-bind:layer="3" />\n    '
};

var ShifFavoritesLvl1 = {
    mixins: [mixin_print_mounted('shif-favorites-level-1')],

    template: '\n        <shif-house-collected-entries v-bind:layer="2"\n                                      v-bind:favorites="true"\n                                      v-bind:include_place="true" />\n    '
};

var ShifFavorites = {
    mixins: [mixin_print_mounted('shif-favorites')],

    template: '\n        <shif-paging id="favorites" />\n    '
};

Vue.component('shif-house-floors-rooms', {
    mixins: [mixin_print_mounted()],

    computed: {
        has_multiple_floors: function has_multiple_floors() {
            return Object.keys(interfaceData.floors).length > 1;
        },

        unassigned_rooms: function unassigned_rooms() {
            var tmp = Object.keys(interfaceData.floors).map(function (x) {
                return interfaceData.floors[x].rooms;
            }).flat();

            var assigned = {};
            var _iteratorNormalCompletion12 = true;
            var _didIteratorError12 = false;
            var _iteratorError12 = undefined;

            try {
                for (var _iterator12 = tmp[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
                    var i = _step12.value;

                    assigned[i] = true;
                }
            } catch (err) {
                _didIteratorError12 = true;
                _iteratorError12 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion12 && _iterator12.return) {
                        _iterator12.return();
                    }
                } finally {
                    if (_didIteratorError12) {
                        throw _iteratorError12;
                    }
                }
            }

            return Object.keys(interfaceData.rooms).filter(function (x) {
                return !assigned[x];
            });
        }
    },

    data: function data() {
        var roomSelectWrapperWidth = 185 + 30;
        var windowWidth = $(window).width() - 100;
        var maxWidth = 1080;

        var rooms_per_floor = Object.keys(interfaceData.floors).map(function (x) {
            return interfaceData.floors[x].rooms.length;
        });
        var max_rooms_per_floor = Math.max.apply(this, rooms_per_floor);

        var roomSelectWrapperMaxCount = windowWidth / roomSelectWrapperWidth;
        roomSelectWrapperMaxCount = roomSelectWrapperMaxCount.toString().split('.')[0];

        if (max_rooms_per_floor > roomSelectWrapperMaxCount) {
            maxWidth = roomSelectWrapperMaxCount * roomSelectWrapperWidth + 20;
        } else {
            maxWidth = max_rooms_per_floor * roomSelectWrapperWidth + 25;
        }

        return {
            maxWidth: maxWidth + 'px'
        };
    },

    template: '\n        <div id="house_rooms" v-bind:style="{\'max-width\': maxWidth}">\n            <template v-for="floor_val, floor_key in interfaceData.floors">\n                <div v-if="has_multiple_floors || unassigned_rooms.length > 0"\n                     class="roomSelectTitle">\n                    {{ floor_val.name }}\n                </div>\n\n                <div class="rooms_wrapper">\n                    <shif-room v-for="room_val in floor_val.rooms"\n                               v-bind:key="room_val"\n                               v-bind:floor="{key: floor_key, value: floor_val}"\n                               v-bind:room="room_val" />\n                </div>\n            </template>\n\n            <template v-if="unassigned_rooms.length > 0">\n                <div class="roomSelectTitle">\n                    {{ i18n(\'house.storyless\') }}\n                </div>\n\n                <div class="rooms_wrapper">\n                    <shif-room v-for="room_val in unassigned_rooms"\n                               v-bind:key="room_val"\n                               v-bind:floor="{key: -1}"\n                               v-bind:room="room_val" />\n                </div>\n            </template>\n        </div>\n    '
});

var ShifHouseLvl3 = {
    mixins: [mixin_print_mounted('shif-house-lvl3')],

    template: '\n        <shif-house-collected-entries v-bind:layer="3" />\n    '
};

var ShifHouseLvl2 = {
    mixins: [mixin_print_mounted('shif-house-lvl2')],

    template: '\n        <shif-house-collected-entries v-bind:layer="2" />\n    '
};

var ShifHouseRooms = {
    mixins: [mixin_print_mounted('shif-house-rooms')],

    template: '\n        <shif-mainmenu-tabs>\n            <shif-house-floors-rooms />\n        </shif-mainmenu-tabs>\n    '
};

var ShifHouse = {
    mixins: [mixin_print_mounted('shif-house')],

    template: '\n        <shif-paging id="house" />\n    '
};

var ShifLog = Vue.component('shif-log', {
    mounted: function mounted() {
        viewLog('-----------------------------');
    },

    template: '\n        <pre id="log" class="content content_single">\n        </pre>\n    '
});

var ShifProfilesGlobal = {
    mixins: [mixin_profiles, mixin_print_mounted('shif-profiles-global')],

    methods: {
        get_icon_or_default: function get_icon_or_default(profile) {
            return get_or_default(profile, 'icon', 'slider_1');
        }
    },

    template: '\n        <div id="profiles" class="content content_single">\n            <div class="profiles_wrapper">\n                <template v-for="i in global_profiles">\n                    <shif-generic-l2 v-bind:icon="get_icon_or_default(i)"\n                                     v-bind:title="i.name"\n                                     v-bind:active="{icon: i.isActive ? \'active\' : \'\'}"\n                                     v-on:click="profile_start(i)">\n                    </shif-generic-l2>\n                </template>\n            </div>\n        </div>\n    '
};

var ShifProfiles = {
    mixins: [mixin_print_mounted('shif-profiles')],

    components: {
        ShifProfilesGlobal: ShifProfilesGlobal
    },

    template: '\n        <shif-mainmenu-tabs>\n            <shif-profiles-global />\n        </shif-mainmenu-tabs>\n    '
};

Vue.component('shif-settings-element', {
    mixins: [mixin_print_mounted()],

    props: {
        name: { type: String, required: true },
        description: { type: String },
        icon: { type: String, default: 'slider_1' },
        translate: { type: Boolean, default: true }
    },
    template: '\n        <div class="button">\n            <shif-icon v-if="icon" classname="button_icon" v-bind:src="icon" />\n            <div class="button_text">\n                <template v-if="description && description.length > 0">\n                    <div class="button_title">{{ translate ? i18n(name) : name }}</div>\n                </template>\n                <template v-else="description && description.length > 0">\n                    <div class="button_title button_no_description">{{ translate ? i18n(name) : name }}</div>\n                </template>\n                <template v-if="description && description.length > 0">\n                    <div class="button_status" style="display:block;">{{ translate ? i18n(description) : description }}</div>\n                </template>\n            </div>\n            <div class="button_action">\n                <svg xmlns="http://www.w3.org/2000/svg" version="1.1" id="svg" x="0" y="0" width="370.81" height="370.81" viewBox="0 0 370.81 370.81">\n                    <g id="Ebene_1">\n                        <path d="M77.9 345.97L102.03 370.81 292.92 185.41 102.03 0 77.9 24.85 243.18 185.41z"/>\n                    </g>\n                </svg>\n            </div>\n        </div>\n    '
});

var ShifSettingsLicenses = {
    mixins: [mixin_print_mounted('shif-settings-licenses')],

    computed: {
        data: function data() {
            return licenses;
        }
    },

    methods: {
        log_hook: function log_hook() {
            this.$router.push('/log');
        }
    },

    template: '\n        <div>\n        <div class="table1">\n            <table>\n                <thead>\n                    <th v-on:click="log_hook">{{ i18n(\'settings.about.table.name\') }}</th>\n                    <th>{{ i18n(\'settings.about.table.version\') }}</th>\n                    <th>{{ i18n(\'settings.about.table.rights\') }}</th>\n                    <th>{{ i18n(\'settings.about.table.license\') }}</th>\n                    <th>{{ i18n(\'settings.about.table.license.url\') }}</th>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>{{ interfaceData.manifest.name }}</td>\n                        <td>{{ interfaceData.manifest.revision }}</td>\n                        <td>{{ interfaceData.manifest.author }}</td>\n                        <td>{{ interfaceData.manifest.license }}</td>\n                        <td>{{ interfaceData.manifest.licenseurl }}</td>\n                    </tr>\n                    <tr v-for="i in data">\n                        <td>{{ i.name }}</td>\n                        <td>{{ i.version }}</td>\n                        <td>{{ i.rights }}</td>\n                        <td>{{ i.licensename }}</td>\n                        <td>{{ i.licenseurl }}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n        </div>\n    '
};

var ShifSettingsUser = {
    mixins: [mixin_print_mounted('shif-settings-user')],

    data: function data() {
        return {
            options: interfaceData.options,
            startpaths: ['favorites', 'house.tab.rooms', 'house.tab.devices', 'house.tab.profiles'],
            languages: interfaceData.i18n.languages,
            name: this.$route.name,

            form: {
                name: 'user_edit',
                startPath: interfaceData.options.startPath,
                language: interfaceData.options.language,
                theme: interfaceData.options.theme,
                color: interfaceData.options.highlight
            }
        };
    },

    computed: {
        themes: function themes() {
            return interfaceData.themes.filter(function (x) {
                return x.name !== 'standard' && x.name !== 'highlight';
            });
        },

        two_fa_value: function two_fa_value() {
            return this.options.userHasTwofaRegistrations ? i18n(this.name + '.twofaRegistered') : i18n(this.name + '.registerTwofa');
        }
    },

    methods: {
        form_submit: function form_submit() {
            var _this14 = this;

            this.$homegear.invoke({
                jsonrpc: '2.0',
                method: 'getUserMetadata',
                params: []
            }, function (data) {
                var new_settings = data.result;

                new_settings.locale = _this14.form.language;

                if (new_settings.interface === undefined) new_settings.interface = {};

                Object.assign(new_settings.interface, {
                    language: _this14.form.language || _this14.options.language || 'en-US',
                    startPath: _this14.form.startPath || _this14.options.startPath || 'house.tab.rooms',
                    theme: _this14.form.theme || 'dark',
                    highlight: _this14.form.color || '#e3a104'
                });

                _this14.$homegear.invoke({
                    jsonrpc: '2.0',
                    method: 'setUserMetadata',
                    params: [new_settings]
                }, function () {
                    window.location.reload(true);
                });
            });
        },

        two_fa_register_dev: function two_fa_register_dev() {
            return user_register_webauthn_device();
        }
    },

    template: '\n        <div class="user_wrapper">\n            <form v-bind:id="form.name"\n                  v-bind:name="form.name"\n                  action="javascript:void(0);"\n                  v-on:submit.stop="form_submit">\n\n                <template v-if="options.twofaChangeable && options.twofaEnabled">\n                    <div class="form-group">\n                        <div class="label">{{ i18n(name + \'.twofa\') }}:</div>\n                        <input id="registerWebauthn"\n                               type="button"\n                               v-bind:disabled="options.userHasTwofaRegistrations"\n                               v-bind:value="two_fa_value"\n                               v-on:click="two_fa_register_dev" />\n                    </div>\n                </template>\n\n                <template v-if="options.languageChangeable">\n                    <div class="form-group">\n                        <div class="label">{{ i18n(name + \'.language\') }}:</div>\n                        <select id="language"\n                                name="language"\n                                v-model="form.language">\n                            <option v-for="value, key in languages"\n                                    v-bind:value="key"\n                                    autocomplete="off">\n                                {{ value.name }}\n                            </option>\n                        </select>\n                    </div>\n                </template>\n\n                <div class="form-group">\n                    <div class="label">{{ i18n(name + \'.startpath\') }}:</div>\n                    <select id="startpath"\n                            name="startpath"\n                            v-model="form.startPath">\n                        <option v-for="i in startpaths"\n                                v-bind:value="i"\n                                autocomplete="off">\n                            {{ i18n(i) }}\n                        </option>\n                    </select>\n                </div>\n\n                <div class="form-group">\n                    <div class="label">{{ i18n(name + \'.theme\') }}:</div>\n                    <select id="theme"\n                            name="theme"\n                            v-model="form.theme">\n                        <option v-for="i in themes"\n                                v-bind:value="i.name"\n                                autocomplete="off">\n                                {{ i18n(name + \'.theme.\' + i.name) }}\n                        </option>\n                    </select>\n                </div>\n\n                <div id="user_highlight_display" class="form-group">\n                    <div class="label">{{ i18n(name + \'.highlight\') }}:</div>\n                    <input id="highlight"\n                           type="hidden"\n                           name="highlight"\n                           v-bind:value="options.highlight" />\n                    <shif-colorpicker v-bind:width=" {max_pixels: 600, percent: 100}"\n                                      v-bind:height="{max_pixels: 620, percent: 100}"\n                                      v-bind:color="options.highlight"\n                                      v-model="form.color"\n                                      />\n                    <div style="clear:both;"></div>\n                </div>\n\n                <div class="form-group">\n                    <input type="submit"\n                           v-bind:name="form.name"\n                           v-bind:value="i18n(name + \'.save\')" />\n                </div>\n\n            </form>\n        </div>\n    '
};

var ShifSettingsItems = function ShifSettingsItems(level) {
    return {
        mixins: [mixin_menus, mixin_print_mounted('shif-settings-items')],

        methods: {
            elements: function elements(level) {
                var _this15 = this;

                return interfaceData.menu.filter(function (x) {
                    return x.mainmenu === 'settings' && x.level === String(level) && !_this15.disabled('menu', x.name);
                });
            }
        },

        template: '\n            <div>\n                <template v-for="i in elements(' + level + ')">\n                    <router-link v-bind:to="{name: i.name}">\n                        <shif-settings-element v-bind:key="i.name"\n                                               v-bind:icon="i.icon"\n                                               v-bind:name="i.name"\n                                               v-bind:description="i.description" />\n                    </router-link>\n                </template>\n            </div>\n        '
    };
};

var ShifSettingsFavorites = {
    data: function data() {
        return {
            state: this.$root.favorites
        };
    },

    watch: {
        'state.enabled': function stateEnabled() {
            if (this.state.enabled) {
                this.$root.profiles.enabled = false;
                this.$router.push({ name: 'house.tab.rooms' });
            }
        }
    },

    template: '\n        <div class="device_wrapper">\n            <div class="device"\n                 v-on:click.prevent="state.enabled = ! state.enabled">\n                <shif-title>{{ i18n(\'settings.favorites.mode\') }}</shif-title>\n                <shif-checkbox v-model="state.enabled" />\n            </div>\n        </div>\n    '
};

var ShifSettingsProfiles = {
    mixins: [mixin_print_mounted('shif-settings-profile')],

    methods: {
        link: function link(profile_id) {
            return {
                name: 'settings.profiles.profile',
                params: {
                    profile: profile_id
                }
            };
        }
    },

    template: '\n        <div>\n            <div class="profiles_wrapper">\n                <template v-for="i in interfaceData.profiles">\n                    <template v-if="i.editable != \'\' || !(\'editable\' in i)">\n                        <router-link v-bind:to="link(i.id)">\n                            <shif-settings-element v-bind:key="i.name"\n                                                v-bind:name="i.name"\n                                                v-bind:translate="false"\n                                                v-bind:icon="i.icon"\n                                                description=""\n                                                />\n                        </router-link>\n                    </template>\n                </template>\n\n                <router-link v-bind:to="{name: \'settings.profiles.new\'}">\n                    <shif-settings-element v-bind:name="i18n(\'settings.profiles.new\')"\n                                           v-bind:translate="false"\n                                           description=""\n                                           icon="plus_1"\n                                           />\n                </router-link>\n            </div>\n        </div>\n    '
};

var ShifSettingsProfileRoleValue = {
    mixins: [mixin_print_mounted('shif-settings-profile-role-value')],

    props: {
        value: {
            required: true
        },
        role_id: {
            required: true
        }
    },

    data: function data() {
        return {
            value_: this.value
        };
    },

    computed: {
        role: function role() {
            return interfaceData.roles[this.role_id];
        },

        role_values: function role_values() {
            var _this16 = this;

            return Object.keys(this.role.roleProfileValues.options).map(function (x) {
                return { id: x, name: _this16.role.roleProfileValues.options[x] };
            }).concat({ id: null, name: '---' });
        }
    },

    watch: {
        value_: function value_() {
            this.$emit('input', this.value_);
            this.$emit('change', this.value_);
        }
    },

    template: '\n        <div>\n            <select v-if="role.roleProfileValues.type === \'select\'"\n                    v-model="value_">\n                <option v-for="i in role_values"\n                        v-bind:value="i.id">\n                    {{ i.name }}\n                </option>\n            </select>\n        </div>\n    '
};

var ShifSettingsProfile = {
    mixins: [mixin_profiles, mixin_print_mounted('shif-settings-profile')],

    components: {
        ShifSettingsProfileRoleValue: ShifSettingsProfileRoleValue
    },

    data: function data() {
        if (this.$route.params.profile === undefined || !(this.$route.params.profile in interfaceData.profiles)) return {
            mode: 'add',
            profile: null,
            form: {
                name: 'profile_add',
                icon: 'slider_1',
                profile_name: '',
                role: {
                    role: null,
                    value: null
                },
                location: {
                    floor: null,
                    room: null,
                    global: false
                }
            }
        };

        var profile = interfaceData.profiles[this.$route.params.profile];

        if (this.$root.profiles.enabled) {
            return {
                mode: 'edit',
                profile: profile,
                form: this.$root.profiles.form
            };
        }

        var _ref5 = profile.locations.length === 0 ? [null, null, false, null] : [profile.locations[0].floorId, profile.locations[0].roomId, profile.global === true],
            _ref6 = _slicedToArray(_ref5, 3),
            floor = _ref6[0],
            room = _ref6[1],
            global = _ref6[2];

        var role = profile.roles !== undefined && profile.roles.length > 0 ? profile.roles[0] : { role: null, value: null };

        return {
            mode: 'edit',
            profile: profile,
            form: {
                name: 'profile_edit',
                icon: profile.icon,
                profile_name: profile.name,
                location: {
                    floor: floor === undefined ? null : floor,
                    room: room === undefined ? null : room,
                    global: global
                },
                role: role
            }
        };
    },

    computed: {
        floors: function floors() {
            return Object.keys(interfaceData.floors).map(function (x) {
                return { id: x, name: interfaceData.floors[x].name };
            }).concat({ id: null, name: '---' });
        },

        filtered_rooms: function filtered_rooms() {
            var rooms = Object.keys(interfaceData.rooms);

            if (this.form.location.floor !== undefined && this.form.location.floor !== null && this.form.location.floor in interfaceData.floors) rooms = interfaceData.floors[this.form.location.floor].rooms;

            return rooms.map(function (x) {
                return { id: x, name: interfaceData.rooms[x].name };
            }).concat({ id: null, name: '---' });
        },

        filtered_roles: function filtered_roles() {
            return Object.keys(interfaceData.roles).filter(function (x) {
                return interfaceData.roles[x].roleProfileValues !== undefined;
            }).map(function (x) {
                return { id: x, name: interfaceData.roles[x].name };
            }).concat({ id: null, name: '---' });
        },

        show_roles: function show_roles() {
            return interfaceData.options.roleProfileDefinable === true;
        }
    },

    methods: {
        form_submit: function form_submit(source) {
            var _this17 = this;

            switch (source) {
                case 'load':
                    this.$root.profiles.form = this.form;
                    this.$root.profiles.id = this.profile.id;

                    return this.profile_load(this.profile, function () {
                        return _this17.$router.push({ name: 'house.tab.rooms' });
                    });

                case 'save':
                    if (this.mode === 'edit') return this.profile_update(this.profile, this.form);

                    return this.profile_add(this.form, function (result) {
                        return _this17.$router.replace({
                            name: 'settings.profiles.profile',
                            params: {
                                profile: result.result
                            }
                        });
                    });

                case 'delete':
                    return this.profile_delete(this.profile, function () {
                        return _this17.$router.replace({ name: 'settings.profiles' });
                    });
            };
        }
    },

    mounted: function mounted() {
        if (this.mode === 'edit' && !this.$root.profiles.enabled) return this.profile_build_root_devs(this.profile);
    },

    template: '\n        <div class="profiles_wrapper">\n            <form v-bind:id="form.name"\n                  v-bind:name="form.name"\n                  action="javascript:void(0);"\n                  v-on:submit.stop="">\n\n                <div class="form-group">\n                    <div class="label">{{ i18n(\'settings.profiles.profile.name\') }}:</div>\n                    <input id="profile_name"\n                           type="text"\n                           name="profile_name"\n                           v-model="form.profile_name" />\n                </div>\n\n                <div class="form-group">\n                    <div class="label">{{ i18n(\'settings.profiles.profile.icon\') }}:</div>\n                        <div id="profile_icons">\n                            <label v-for="icon, key in interfaceIcons"\n                                   v-bind:class="{selected: form.icon == key}"\n                                   class="profile_icon_wrapper">\n                                <shif-icon classname="profile_icon" v-bind:src="key" />\n                                <input type="radio"\n                                       name="profile_icon"\n                                       v-bind:value="key"\n                                       v-model="form.icon"\n                                       hidden />\n                            </label>\n                        </div>\n                </div>\n\n                <div class="form-group">\n                    <div class="label">{{ i18n(\'settings.profiles.profile.locations\') }}:</div>\n                    <div class="global"\n                         v-on:click.prevent="form.location.global = !form.location.global">\n                        <div class="label">{{ i18n(\'settings.profiles.profile.locations.global\') }}:</div>\n                        <shif-checkbox v-model="form.location.global" />\n                    </div>\n                    <div class="label">{{ i18n(\'settings.profiles.profile.locations.floor\') }}:</div>\n                    <select id="locationsFloors"\n                            name="locationsFloors"\n                            v-model="form.location.floor">\n                        <option v-for="i in floors"\n                                v-bind:value="i.id"\n                                autocomplete="off">\n                            {{ i.name }}\n                        </option>\n                    </select>\n\n                    <div class="label">{{ i18n(\'settings.profiles.profile.locations.room\') }}:</div>\n                    <select id="locationsRooms"\n                            name="locationsRooms"\n                            v-model="form.location.room">\n                        <option v-for="i in filtered_rooms"\n                                v-bind:value="i.id"\n                                autocomplete="off">\n                            {{ i.name }}\n                        </option>\n                    </select>\n                </div>\n\n                <div v-if="show_roles"\n                     class="form-group">\n                    <div class="label">{{ i18n(\'settings.profiles.profile.roles\') }}:</div>\n\n                    <select v-model="form.role.role">\n                        <option v-for="i in filtered_roles"\n                                v-bind:value="i.id"\n                                autocomplete="off">\n                            {{ i.name }}\n                        </option>\n                    </select>\n\n                    <shif-settings-profile-role-value\n                        v-if="form.role.role"\n                        v-model="form.role.value"\n                        v-bind:role_id="form.role.role" />\n                </div>\n\n                <div class="form-group">\n                    <input v-if="mode === \'edit\' && form.role.role === null"\n                           type="submit"\n                           name="load"\n                           v-on:click="form_submit(\'load\')"\n                           v-bind:value="i18n(\'settings.profiles.profile.load\')" />\n\n                    <input type="submit"\n                           name="save"\n                           v-on:click="form_submit(\'save\')"\n                           v-bind:value="i18n(\'settings.profiles.profile.save\')" />\n\n                    <input v-if="mode === \'edit\'"\n                           type="submit"\n                           name="delete"\n                           v-on:click="form_submit(\'delete\')"\n                           v-bind:value="i18n(\'settings.profiles.profile.delete\')" />\n                </div>\n            </form>\n        </div>\n    '
};

var ShifSettings = {
    mixins: [mixin_print_mounted('shif-settings')],

    template: '\n        <shif-paging id="settings" />\n    '
};

function check_disabled(device, indexes) {
    function check_event_trigger(event) {
        if (event.trigger == undefined || event.trigger.length != 3) return false;

        var trigger = event.trigger;
        return trigger[0] in interfaceData.map_invoke && trigger[1] in interfaceData.map_invoke[trigger[0]] && trigger[2] in interfaceData.map_invoke[trigger[0]][trigger[1]];
    }

    function check_event_disable(event, control_idx) {
        return 'disable' in event && control_idx in event.disable;
    }

    function check_event_condition(event) {
        return 'condition' in event && 'operator' in event.condition && 'value' in event.condition;
    }

    var ret_enabled = { flag: false };

    if (!('metadata' in device && 'event_hooks' in device.metadata)) return ret_enabled;

    var _iteratorNormalCompletion13 = true;
    var _didIteratorError13 = false;
    var _iteratorError13 = undefined;

    try {
        for (var _iterator13 = device.metadata.event_hooks[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
            var event = _step13.value;

            if (!check_event_trigger(event) || !check_event_disable(event, indexes.control) || !check_event_condition(event)) continue;

            var trigger = event.trigger;
            var disable = event.disable;
            var condition = event.condition;

            if (!disable[indexes.control]) continue;

            var devices = interfaceData.map_invoke[trigger[0]][trigger[1]][trigger[2]];
            var _iteratorNormalCompletion14 = true;
            var _didIteratorError14 = false;
            var _iteratorError14 = undefined;

            try {
                for (var _iterator14 = devices[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
                    var dev = _step14.value;

                    var res = condition_check(condition, interfaceData.devices[dev.databaseId].controls[dev.control].variableInputs[dev.input].properties.value);
                    if (res) return {
                        flag: true,
                        texts: event.texts
                    };
                }
            } catch (err) {
                _didIteratorError14 = true;
                _iteratorError14 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion14 && _iterator14.return) {
                        _iterator14.return();
                    }
                } finally {
                    if (_didIteratorError14) {
                        throw _iteratorError14;
                    }
                }
            }
        }
    } catch (err) {
        _didIteratorError13 = true;
        _iteratorError13 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion13 && _iterator13.return) {
                _iterator13.return();
            }
        } finally {
            if (_didIteratorError13) {
                throw _iteratorError13;
            }
        }
    }

    return ret_enabled;
}

Vue.use({
    install: function install(Vue, opts) {
        Vue.prototype.$homegear = homegear;
    }
});

Vue.mixin({
    data: function data() {
        return {
            debug: false,
            interfaceIcons: icons,
            interfaceData: interfaceData
        };
    },

    filters: {
        pretty: function pretty(val) {
            return JSON.stringify(val, null, 4);
        },

        warn: function warn(val) {
            console.warn(val);
        },

        log: function log(val) {
            console.log(val);
        }
    },

    methods: {
        level3: function level3(device, name) {
            var matched = this.$route.matched.map(function (x) {
                return x.name;
            });
            var last = matched[matched.length - 1];

            if (matched.indexOf('house.tab.rooms.room') !== -1) {
                return this.$router.push({
                    name: last + '.device',
                    params: {
                        floor: this.$route.params.floor,
                        room: this.$route.params.room,
                        device: device
                    }
                });
            }

            if (matched.indexOf('house.tab.devices') !== -1) {
                // TODO: verify that there is always at least a room and a floor
                return this.$router.push({
                    name: last + '.device',
                    params: {
                        floor: interfaceData.devices[device].floors[0],
                        room: interfaceData.devices[device].rooms[0],
                        device: device
                    }
                });
            }

            if (matched.indexOf('favorites.list') !== -1) {
                // TODO: verify that there is always at least a room and a floor
                return this.$router.push({
                    name: 'favorites.device',
                    params: {
                        floor: interfaceData.devices[device].floors[0],
                        room: interfaceData.devices[device].rooms[0],
                        device: device
                    }
                });
            }

            /**
             * Only act in those two cases!
             * There might have been a click on the disabled content
             * (content_small) which we do not care about.
             **/
            // throw 'BUG: you should not get here';
        },

        round: function round(val, precision) {
            var mul = Math.pow(10, precision || 0);

            return Math.round(val * mul) / mul;
        },

        float_formatted: function float_formatted(val) {
            var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

            return parseFloat(val).toFixed(precision);
        },

        alert: window.alert,

        i18n: i18n
    }
});

var ShifLogoff = Vue.component('shif-logoff', {
    mounted: function mounted() {
        user_logoff();
    }
});

var router = new VueRouter({
    routes: [{ path: '/', name: 'index', redirect: { name: interfaceData.options.startPath || 'house' } }, { path: '/nb', name: 'legacy', redirect: { name: 'index' } }, { path: '/house', name: 'house', component: ShifHouse, redirect: { name: 'house.tab.rooms' },
        children: [{
            name: 'house.tab.rooms',
            path: 'rooms',
            component: ShifHouseRooms,
            meta: { breadcrumbs: ['house', 'house.tab.rooms'], base: true }
        }, {
            name: 'house.tab.rooms.room',
            path: 'rooms/floor/:floor/room/:room',
            components: { small: ShifHouseRooms, big: ShifHouseLvl2 },
            meta: { breadcrumbs: ['house', 'house.tab.rooms', 'house.tab.rooms.room'] }
        }, {
            name: 'house.tab.rooms.room.device',
            path: 'rooms/floor/:floor/room/:room/device/:device',
            components: { small: ShifHouseLvl2, big: ShifHouseLvl3 },
            meta: { breadcrumbs: ['house', 'house.tab.rooms', 'house.tab.rooms.room', 'house.tab.rooms.room.device'] }
        }, {
            name: 'house.tab.devices',
            path: 'devices',
            component: ShifHouseDevices,
            meta: { breadcrumbs: ['house', 'house.tab.devices'], base: true }
        }, {
            name: 'house.tab.devices.device',
            path: 'devices/floor/:floor/room/:room/device/:device',
            components: { small: ShifHouseDevices, big: ShifAllDevicesLvl3 },
            meta: { breadcrumbs: ['house', 'house.tab.devices', 'house.tab.rooms.room', 'house.tab.devices.device'] }
        }, {
            path: 'profiles',
            name: 'house.tab.profiles',
            component: ShifProfiles,
            meta: { breadcrumbs: ['house', 'house.tab.profiles'], base: true }
        }]
    }, { path: '/settings', name: 'settings', component: ShifSettings, redirect: { name: 'settings.list' },
        children: [{
            name: 'settings.list',
            path: 'list',
            component: ShifSettingsItems(1),
            meta: { breadcrumbs: ['settings'], base: true }
        }, {
            name: 'settings.about',
            path: 'about',
            components: { small: ShifSettingsItems(1), big: ShifSettingsLicenses },
            meta: { breadcrumbs: ['settings', 'settings.about'] }
        }, {
            path: 'user',
            name: 'settings.user',
            components: { small: ShifSettingsItems(1), big: ShifSettingsItems(2) },
            meta: { breadcrumbs: ['settings', 'settings.user'] }
        }, {
            path: 'user/manage',
            name: 'settings.user.manage',
            components: { small: ShifSettingsItems(2), big: ShifSettingsUser },
            meta: { breadcrumbs: ['settings', 'settings.user', 'settings.user.manage'] }
        }, {
            path: 'favorites',
            name: 'settings.favorites',
            components: { small: ShifSettingsItems(1), big: ShifSettingsFavorites },
            meta: { breadcrumbs: ['settings', 'settings.favorites'] }
        }, {
            path: 'profiles',
            name: 'settings.profiles',
            components: { small: ShifSettingsItems(1), big: ShifSettingsProfiles },
            meta: { breadcrumbs: ['settings', 'settings.profiles'] }
        }, {
            path: 'profiles/add',
            name: 'settings.profiles.new',
            components: { small: ShifSettingsProfiles, big: ShifSettingsProfile },
            meta: { breadcrumbs: ['settings', 'settings.profiles', 'settings.profiles.new'] }
        }, {
            path: 'profiles/edit/:profile',
            name: 'settings.profiles.profile',
            components: { small: ShifSettingsProfiles, big: ShifSettingsProfile },
            meta: { breadcrumbs: ['settings', 'settings.profiles', 'settings.profiles.profile'] }
        }]
    }, { path: '/favorites', name: 'favorites', component: ShifFavorites, redirect: { name: 'favorites.list' },
        children: [{
            name: 'favorites.list',
            path: 'list',
            component: ShifFavoritesLvl1,
            meta: { breadcrumbs: ['favorites'], base: true }
        }, {
            name: 'favorites.device',
            path: 'floor/:floor/room/:room/device/:device',
            components: { small: ShifFavoritesLvl1, big: ShifFavoritesLvl3 },
            meta: { breadcrumbs: ['favorites', 'house.tab.rooms.room', 'favorites.device'] }
        }]
    }, {
        path: '/log',
        name: 'log',
        component: ShifLog,
        meta: { breadcrumbs: ['log'] }
    }, { path: '/logoff', name: 'logoff', component: ShifLogoff }]
});

var app = new Vue({
    data: {
        favorites: {
            enabled: false
        },
        profiles: {
            devs: {},
            enabled: false,
            active: null
        }
    },

    // Hack: decrease .content height when modemenu is enabled.
    computed: {
        modemenu_show: function modemenu_show() {
            return this.favorites.enabled === true || this.profiles.enabled === true;
        }
    },

    router: router,

    template: '\n        <div id="inhalt" v-bind:class="{\'modemenu-visible\': modemenu_show}">\n            <router-view />\n\n            <shif-modemenu />\n            <shif-mainmenu />\n        </div>\n    '
});

var breadcrumbs = new Vue({
    router: router,

    computed: {
        routes_with_proper_names: function routes_with_proper_names() {
            var _this18 = this;

            if (this.$route.meta === undefined || this.$route.meta.breadcrumbs === undefined) return [];

            var routes = this.$route.meta.breadcrumbs.map(function (name) {
                return {
                    link: name,
                    name: _this18.get_name(name),
                    disabled: false
                };
            }).filter(function (x) {
                return x.name !== '?';
            });

            if (routes.length > 0) routes[routes.length - 1].disabled = true;

            return routes;
        },

        back_wanted: function back_wanted() {
            return !this.$route.meta.base && this.routes_with_proper_names.length > 1;
        }
    },

    methods: {
        get_name: function get_name(route_name) {
            function floor() {
                if (!interfaceData.options.showFloor) return '';

                return Number(params.floor) === -1 ? i18n('house.storyless') + ' - ' : interfaceData.floors[params.floor].name + ' - ';
            }

            var params = this.$route.params;

            switch (route_name) {
                case 'house.tab.rooms.room':
                    return floor() + interfaceData.rooms[params.room].name;

                case 'house.tab.rooms.room.device':
                case 'house.tab.devices.device':
                case 'favorites.device':
                    return interfaceData.devices[params.device].label;

                case 'log':
                    return 'Log';

                case 'settings.profiles.profile':
                    return interfaceData.profiles[params.profile].name;
            }

            return i18n(route_name);
        }
    },

    template: '\n        <div id="breadcrumbs">\n            <template>\n                <shif-icon id="back" src="arrow_left_1"\n                           v-bind:style="{visibility: back_wanted ? \'visible\' : \'hidden\'}"\n                           v-on:click="$router.back()"/>\n            </template>\n            <div id="breadcrumb_wrapper">\n                <template v-for="i in routes_with_proper_names">\n                    <router-link v-bind:to="{name: i.link}"\n                                 v-bind:disabled="i.disabled"\n                                 v-bind:class="{disabled: i.disabled}"\n                                 >{{ i.name }}</router-link>\n                </template>\n            </div>\n        </div>\n    '
});

var error = new Vue({
    el: '#error',

    data: {
        msgs: []
    },

    methods: {
        remove_msg: function remove_msg(msg_idx) {
            this.msgs.splice(msg_idx, 1);
        },

        push: function push(msg) {
            this.msgs.unshift(msg);
        },

        set: function set(msg) {
            this.msgs = [msg];
        }
    },

    template: '\n        <div id="error">\n            <div v-for="msg, i in msgs"\n                 class="toast">\n                <button class="toast_close" v-on:click="remove_msg(i)">{{i18n(\'hide\')}}</button>\n                <div class="toast_content" v-html="msg"></div>\n            </div>\n        </div>\n    '
});
