<homegearDevice version="1">
	<supportedDevices>
		<device id="OpenWeatherMap">
			<description>OpenWeatherMap</description>
			<typeNumber>0x100</typeNumber>
		</device>
	</supportedDevices>
	<runProgram>
		<startType>permanent</startType>
		<script2>
<![CDATA[<?php
use parallel\{Channel,Runtime,Events,Events\Event};

$eventThread = function(string $scriptId, int $peerId, Channel $homegearChannel, Channel $eventChannel)
{
	$hg = new \Homegear\Homegear();

	if($hg->registerThread($scriptId) === false)
	{
		$hg->log(2, 'Could not register thread.');
		return false;
	}

	$hg->subscribePeer($peerId);

	$events = new Events();
	$events->addChannel($homegearChannel);
	$events->setBlocking(false);

	while(true)
	{
		$result = $hg->pollEvent();
		if($result["TYPE"] == "event" && $result["PEERID"] == $peerId)
		{
			if($result["VARIABLE"] == "REQUEST")
			{
				$eventChannel->send(['name' => 'request', 'value' => true]);
			}
		}
		else if($result["TYPE"] == "updateDevice" && $result["PEERID"] == $peerId)
		{
			$eventChannel->send(['name' => 'updateDevice', 'value' => true]);
		}

		$event = NULL;
		do
		{
			$event = $events->poll();
			if($event && $event->source == 'eventHomegearChannelPeer'.$peerId)
			{
				$events->addChannel($homegearChannel);
				if($event->type == Event\Type::Read)
				{
					if(is_array($event->value) && count($event->value) > 0)
					{
						if($event->value['name'] == 'stop') return true; //Stop
					}
				}
				else if($event->type == Event\Type::Close) return true; //Stop
			}
		}
		while($event);
	}
};

$mainThread = function(string $scriptId, int $peerId, Channel $homegearChannel, Channel $eventChannel)
{
	$hg = new \Homegear\Homegear();

	if($hg->registerThread($scriptId) === false)
	{
		$hg->log(2, 'Could not register thread.');
		return false;
	}

	$interval = 60;
	$secondsWaited = 0;
	$events = new Events();
	$events->addChannel($homegearChannel);
	$events->addChannel($eventChannel);
	$events->setTimeout(1000000);

	while(true)
	{
		try
		{
			if($secondsWaited >= $interval)
			{
				$secondsWaited = 0;

				$config = $hg->getParamset($peerId, 0, "MASTER");
			    if(!array_key_exists("LANGUAGE_CODE", $config) || !array_key_exists("CITY_ID", $config))
			    {
			    	$hg->log(2, "Error: Peer does not seem to be an OpenWeatherMap device.");
			    	continue;
			    }
			    if($config["API_KEY"] == "")
			    {
			    	$hg->log(2, "Warning: No API key set.");
			    	continue;
			    }

			    $interval = $config["REQUEST_INTERVAL"];
			    if($interval < 60) $interval = 60;
			    else if($interval >86400) $interval = 86400;

			    $url = "http://api.openweathermap.org/data/2.5/weather?id=".$config["CITY_ID"]."&units=metric&cnt=7&lang=".$config["LANGUAGE_CODE"]."&APPID=".$config["API_KEY"];
			    for($i = 0; $i < 3; $i++)
			    {
				    $json = @file_get_contents($url);
				    if($json) break;
				}
				if(!$json)
			    {
			        $hg->log(3, "Warning: Response from openweathermap.org is empty.");
			        continue;
			    }
			    $data = json_decode($json, true);
			    if(!$data || count($data) == 0)
			    {
			    	$hg->log(3, "Warning: Response from openweathermap.org is empty.");
			        continue;
			    }
			    if($data["cod"] != "404")
			    {
			    	$hg->setValue($peerId, 1, "LAST_DATA", time());
			        $hg->setValue($peerId, 1, "CITY_LONGITUDE", (double)$data["coord"]["lon"]);
			        $hg->setValue($peerId, 1, "CITY_LATITUDE", (double)$data["coord"]["lat"]);
			        $hg->setValue($peerId, 1, "SUNRISE", (integer)$data["sys"]["sunrise"]);
			        $hg->setValue($peerId, 1, "SUNSET", (integer)$data["sys"]["sunset"]);
			        if(array_key_exists("weather", $data) && count($data["weather"]) > 0)
			        {
			            $hg->setValue($peerId, 1, "WEATHER", (string)$data["weather"][0]["main"]);
			            $hg->setValue($peerId, 1, "WEATHER_DESCRIPTION", (string)$data["weather"][0]["description"]);
			            $hg->setValue($peerId, 1, "WEATHER_ICON", (string)$data["weather"][0]["icon"]);
			            $hg->setValue($peerId, 1, "WEATHER_ICON_URL", "http://openweathermap.org/img/w/".$data["weather"][0]["icon"].".png");
			        }
			        else
			        {
			            $hg->setValue($peerId, 1, "WEATHER", "");
			            $hg->setValue($peerId, 1, "WEATHER_DESCRIPTION", "");
			            $hg->setValue($peerId, 1, "WEATHER_ICON", "");
			            $hg->setValue($peerId, 1, "WEATHER_ICON_URL", "");
			        }
			        $hg->setValue($peerId, 1, "TEMPERATURE", (double)$data["main"]["temp"]);
			        $hg->setValue($peerId, 1, "HUMIDITY", (integer)$data["main"]["humidity"]);
			        $hg->setValue($peerId, 1, "PRESSURE", (double)$data["main"]["pressure"]);
			        $hg->setValue($peerId, 1, "WIND_SPEED", (double)$data["wind"]["speed"]);
			        $hg->setValue($peerId, 1, "WIND_GUST", array_key_exists("gust", $data["wind"]) ? (double)$data["wind"]["gust"] : 0.0);
			        $hg->setValue($peerId, 1, "WIND_DIRECTION", array_key_exists("deg", $data["wind"]) ? (double)$data["wind"]["deg"] : 0.0);
			        $hg->setValue($peerId, 1, "RAIN_3H", array_key_exists("rain", $data) && array_key_exists("3h", $data["rain"]) ? (double)$data["rain"]["3h"] : 0.0);
			        $hg->setValue($peerId, 1, "SNOW_3H", array_key_exists("snow", $data) && array_key_exists("3h", $data["snow"]) ? (double)$data["snow"]["3h"] : 0.0);
			        $hg->setValue($peerId, 1, "CLOUD_COVERAGE", (integer)$data["clouds"]["all"]);
			    }
			    else
			    {
			    	$hg->log(2, "Error: City or country not found.");
			        $hg->setValue($peerId, 1, "CITY_LONGITUDE", 0.0);
			        $hg->setValue($peerId, 1, "CITY_LATITUDE", 0.0);
			        $hg->setValue($peerId, 1, "SUNRISE", 0);
			        $hg->setValue($peerId, 1, "SUNSET", 0);
			        $hg->setValue($peerId, 1, "WEATHER", "");
			        $hg->setValue($peerId, 1, "WEATHER_DESCRIPTION", "");
			        $hg->setValue($peerId, 1, "WEATHER_ICON", "");
			        $hg->setValue($peerId, 1, "WEATHER_ICON_URL", "");
			        $hg->setValue($peerId, 1, "TEMPERATURE", 0.0);
			        $hg->setValue($peerId, 1, "HUMIDITY", 0);
			        $hg->setValue($peerId, 1, "PRESSURE", 0.0);
			        $hg->setValue($peerId, 1, "WIND_SPEED", 0.0);
			        $hg->setValue($peerId, 1, "WIND_GUST", 0.0);
			        $hg->setValue($peerId, 1, "WIND_DIRECTION", 0.0);
			        $hg->setValue($peerId, 1, "RAIN_3H", 0.0);
			        $hg->setValue($peerId, 1, "SNOW_3H", 0.0);
			        $hg->setValue($peerId, 1, "CLOUD_COVERAGE", 0);
			    }
			}

			$event = NULL;
			do
			{
				$event = $events->poll();
				if($event)
				{
					if($event->source == 'mainHomegearChannelPeer'.$peerId)
					{
						$events->addChannel($homegearChannel);
						if($event->type == Event\Type::Read)
						{
							if(is_array($event->value) && count($event->value) > 0)
							{
								if($event->value['name'] == 'stop') return true; //Stop
							}
						}
						else if($event->type == Event\Type::Close) return true; //Stop
					}
					else if($event->source == 'eventChannelPeer'.$peerId)
					{
						$events->addChannel($eventChannel);
						if($event->type == Event\Type::Read)
						{
							if(is_array($event->value) && count($event->value) > 0)
							{
								if($event->value['name'] == 'updateDevice' || $event->value['name'] == 'request') 
								{
									$secondsWaited = $interval;
									break;
								}
							}
						}
					}
				}
			}
			while($event);
		}
		catch(Events\Error\Timeout $ex)
		{
			$secondsWaited++;
		}
	}

	return true;
};

class HomegearDevice extends HomegearDeviceBase
{
	private $hg = NULL;
	private $peerId = NULL;
	private $mainRuntime = NULL;
	private $mainFuture = NULL;
	private $mainHomegearChannel = NULL; //Channel to pass Homegear events to main thread
	private $eventRuntime = NULL;
	private $eventFuture = NULL;
	private $eventHomegearChannel = NULL; //Channel to pass Homegear events to event thread
	private $eventChannel = NULL; //Channel to pass events from event thread to main thread

	public function __construct()
	{
		$this->hg = new \Homegear\Homegear();
	}

	public function __destruct()
	{
		$this->stop();
		$this->waitForStop();
	}

	public function init($peerId) : bool
	{
		$this->peerId = $peerId;
		return true;
	}

	public function start() : bool
	{
		$this->mainRuntime = new Runtime();
		$this->eventRuntime = new Runtime();

		$this->mainHomegearChannel = Channel::make('mainHomegearChannelPeer'.$this->peerId, Channel::Infinite);
		$this->eventHomegearChannel = Channel::make('eventHomegearChannelPeer'.$this->peerId, Channel::Infinite);
		$this->eventChannel = Channel::make('eventChannelPeer'.$this->peerId, Channel::Infinite);

		global $mainThread;
		$this->mainFuture = $this->mainRuntime->run($mainThread, [$this->hg->getScriptId(), $this->peerId, $this->mainHomegearChannel, $this->eventChannel]);

		global $eventThread;
		$this->eventFuture = $this->eventRuntime->run($eventThread, [$this->hg->getScriptId(), $this->peerId, $this->eventHomegearChannel, $this->eventChannel]);

		return true;
	}

	public function stop()
	{
		if($this->eventHomegearChannel) $this->eventHomegearChannel->send(['name' => 'stop', 'value' => true]);
		if($this->mainHomegearChannel) $this->mainHomegearChannel->send(['name' => 'stop', 'value' => true]);
	}

	public function waitForStop()
	{
		if($this->eventFuture)
		{
			$this->eventFuture->value();
			$this->eventFuture = NULL;
		}

		if($this->mainFuture)
		{
			$this->mainFuture->value();
			$this->mainFuture = NULL;
		}

		if($this->mainHomegearChannel)
		{
			$this->mainHomegearChannel->close();
			$this->mainHomegearChannel = NULL;
		}

		if($this->eventHomegearChannel)
		{
			$this->eventHomegearChannel->close();
			$this->eventHomegearChannel = NULL;
		}

		if($this->eventChannel)
		{
			$this->eventChannel->close();
			$this->eventChannel = NULL;
		}


		if($this->eventRuntime)
		{
			$this->eventRuntime->close();
			$this->eventRuntime = NULL;
		}

		if($this->mainRuntime)
		{
			$this->mainRuntime->close();
			$this->mainRuntime = NULL;
		}
	}
}
]]>
		</script2>
	</runProgram>
	<properties/>
	<functions>
		<function channel="0" type="" channelCount="1">
			<properties/>
			<configParameters>custom_ch0_master</configParameters>
		</function>
		<function channel="1" type="OpenWeatherMap" channelCount="1">
			<properties/>
			<configParameters>config</configParameters>
			<variables>custom_ch1_values</variables>
		</function>
	</functions>
	<packets/>
	<parameterGroups>
		<configParameters id="config"/>
		<configParameters id="custom_ch0_master">
			<parameter id="REQUEST_INTERVAL">
				<properties>
					<unit>s</unit>
					<casts>
						<rpcBinary/>
					</casts>
				</properties>
				<logicalInteger>
					<minimumValue>60</minimumValue>
					<maximumValue>86400</maximumValue>
					<defaultValue>900</defaultValue>
				</logicalInteger>
				<physicalInteger>
					<operationType>config</operationType>
				</physicalInteger>
			</parameter>
			<parameter id="API_KEY">
				<properties>
					<password>true</password>
					<casts>
						<rpcBinary/>
					</casts>
				</properties>
				<logicalString/>
				<physicalString>
					<operationType>config</operationType>
				</physicalString>
			</parameter>
			<parameter id="CITY_ID">
				<properties>
					<casts>
						<rpcBinary/>
					</casts>
				</properties>
				<logicalInteger>
					<defaultValue>2891122</defaultValue>
				</logicalInteger>
				<physicalInteger>
					<operationType>config</operationType>
				</physicalInteger>
			</parameter>
			<parameter id="LANGUAGE_CODE">
				<properties>
					<casts>
						<rpcBinary/>
					</casts>
				</properties>
				<logicalString>
					<defaultValue>EN</defaultValue>
				</logicalString>
				<physicalString>
					<operationType>config</operationType>
				</physicalString>
			</parameter>
		</configParameters>
		<variables id="custom_ch1_values">
			<parameter id="REQUEST">
				<properties>
					<readable>false</readable>
					<casts>
						<rpcBinary/>
					</casts>
				</properties>
				<logicalAction/>
				<physicalInteger>
					<operationType>store</operationType>
				</physicalInteger>
			</parameter>
			<parameter id="LAST_DATA">
				<properties>
					<writeable>false</writeable>
					<addonWriteable>true</addonWriteable>
					<unit>s</unit>
					<casts>
						<rpcBinary/>
					</casts>
				</properties>
				<logicalInteger>
					<minimumValue>0</minimumValue>
				</logicalInteger>
				<physicalInteger>
					<operationType>store</operationType>
				</physicalInteger>
			</parameter>
			<parameter id="CITY_LONGITUDE">
				<properties>
					<writeable>false</writeable>
					<addonWriteable>true</addonWriteable>
					<signed>true</signed>
					<unit>°</unit>
					<casts>
						<rpcBinary/>
					</casts>
				</properties>
				<logicalDecimal>
					<minimumValue>-180.000000</minimumValue>
					<maximumValue>180.000000</maximumValue>
				</logicalDecimal>
				<physicalInteger>
					<operationType>store</operationType>
				</physicalInteger>
			</parameter>
			<parameter id="CITY_LATITUDE">
				<properties>
					<writeable>false</writeable>
					<addonWriteable>true</addonWriteable>
					<signed>true</signed>
					<unit>°</unit>
					<casts>
						<rpcBinary/>
					</casts>
				</properties>
				<logicalDecimal>
					<minimumValue>-90.000000</minimumValue>
					<maximumValue>90.000000</maximumValue>
				</logicalDecimal>
				<physicalInteger>
					<operationType>store</operationType>
				</physicalInteger>
			</parameter>
			<parameter id="SUNRISE">
				<properties>
					<writeable>false</writeable>
					<addonWriteable>true</addonWriteable>
					<unit>s</unit>
					<casts>
						<rpcBinary/>
					</casts>
				</properties>
				<logicalInteger>
					<minimumValue>0</minimumValue>
				</logicalInteger>
				<physicalInteger>
					<operationType>store</operationType>
				</physicalInteger>
			</parameter>
			<parameter id="SUNSET">
				<properties>
					<writeable>false</writeable>
					<addonWriteable>true</addonWriteable>
					<unit>s</unit>
					<casts>
						<rpcBinary/>
					</casts>
				</properties>
				<logicalInteger>
					<minimumValue>0</minimumValue>
				</logicalInteger>
				<physicalInteger>
					<operationType>store</operationType>
				</physicalInteger>
			</parameter>
			<parameter id="WEATHER">
				<properties>
					<writeable>false</writeable>
					<addonWriteable>true</addonWriteable>
					<casts>
						<rpcBinary/>
					</casts>
				</properties>
				<logicalString/>
				<physicalInteger>
					<operationType>store</operationType>
				</physicalInteger>
			</parameter>
			<parameter id="WEATHER_DESCRIPTION">
				<properties>
					<writeable>false</writeable>
					<addonWriteable>true</addonWriteable>
					<casts>
						<rpcBinary/>
					</casts>
				</properties>
				<logicalString/>
				<physicalInteger>
					<operationType>store</operationType>
				</physicalInteger>
			</parameter>
			<parameter id="WEATHER_ICON">
				<properties>
					<writeable>false</writeable>
					<addonWriteable>true</addonWriteable>
					<casts>
						<rpcBinary/>
					</casts>
				</properties>
				<logicalString/>
				<physicalInteger>
					<operationType>store</operationType>
				</physicalInteger>
			</parameter>
			<parameter id="WEATHER_ICON_URL">
				<properties>
					<writeable>false</writeable>
					<addonWriteable>true</addonWriteable>
					<casts>
						<rpcBinary/>
					</casts>
				</properties>
				<logicalString/>
				<physicalInteger>
					<operationType>store</operationType>
				</physicalInteger>
			</parameter>
			<parameter id="TEMPERATURE">
				<properties>
					<writeable>false</writeable>
					<addonWriteable>true</addonWriteable>
					<signed>true</signed>
					<unit>°C</unit>
					<casts>
						<rpcBinary/>
					</casts>
				</properties>
				<logicalDecimal>
					<minimumValue>-100.000000</minimumValue>
					<maximumValue>100.000000</maximumValue>
				</logicalDecimal>
				<physicalInteger>
					<operationType>store</operationType>
				</physicalInteger>
			</parameter>
			<parameter id="HUMIDITY">
				<properties>
					<writeable>false</writeable>
					<addonWriteable>true</addonWriteable>
					<unit>%</unit>
					<casts>
						<rpcBinary/>
					</casts>
				</properties>
				<logicalInteger>
					<minimumValue>0</minimumValue>
					<maximumValue>100</maximumValue>
				</logicalInteger>
				<physicalInteger>
					<operationType>store</operationType>
				</physicalInteger>
			</parameter>
			<parameter id="PRESSURE">
				<properties>
					<writeable>false</writeable>
					<addonWriteable>true</addonWriteable>
					<unit>hPa</unit>
					<casts>
						<rpcBinary/>
					</casts>
				</properties>
				<logicalDecimal>
					<minimumValue>0.000000</minimumValue>
					<maximumValue>2000.000000</maximumValue>
				</logicalDecimal>
				<physicalInteger>
					<operationType>store</operationType>
				</physicalInteger>
			</parameter>
			<parameter id="WIND_SPEED">
				<properties>
					<writeable>false</writeable>
					<addonWriteable>true</addonWriteable>
					<unit>km/h</unit>
					<casts>
						<rpcBinary/>
					</casts>
				</properties>
				<logicalDecimal>
					<minimumValue>0.000000</minimumValue>
				</logicalDecimal>
				<physicalInteger>
					<operationType>store</operationType>
				</physicalInteger>
			</parameter>
			<parameter id="WIND_GUST">
				<properties>
					<writeable>false</writeable>
					<addonWriteable>true</addonWriteable>
					<unit>km/h</unit>
					<casts>
						<rpcBinary/>
					</casts>
				</properties>
				<logicalDecimal>
					<minimumValue>0.000000</minimumValue>
				</logicalDecimal>
				<physicalInteger>
					<operationType>store</operationType>
				</physicalInteger>
			</parameter>
			<parameter id="WIND_DIRECTION">
				<properties>
					<writeable>false</writeable>
					<addonWriteable>true</addonWriteable>
					<unit>°</unit>
					<casts>
						<rpcBinary/>
					</casts>
				</properties>
				<logicalDecimal>
					<minimumValue>0.000000</minimumValue>
					<maximumValue>360.000000</maximumValue>
				</logicalDecimal>
				<physicalInteger>
					<operationType>store</operationType>
				</physicalInteger>
			</parameter>
			<parameter id="RAIN_3H">
				<properties>
					<writeable>false</writeable>
					<addonWriteable>true</addonWriteable>
					<unit>mm</unit>
					<casts>
						<rpcBinary/>
					</casts>
				</properties>
				<logicalDecimal>
					<minimumValue>0.000000</minimumValue>
				</logicalDecimal>
				<physicalInteger>
					<operationType>store</operationType>
				</physicalInteger>
			</parameter>
			<parameter id="SNOW_3H">
				<properties>
					<writeable>false</writeable>
					<addonWriteable>true</addonWriteable>
					<unit>mm</unit>
					<casts>
						<rpcBinary/>
					</casts>
				</properties>
				<logicalDecimal>
					<minimumValue>0.000000</minimumValue>
				</logicalDecimal>
				<physicalInteger>
					<operationType>store</operationType>
				</physicalInteger>
			</parameter>
			<parameter id="CLOUD_COVERAGE">
				<properties>
					<writeable>false</writeable>
					<addonWriteable>true</addonWriteable>
					<unit>%</unit>
					<casts>
						<rpcBinary/>
					</casts>
				</properties>
				<logicalInteger>
					<minimumValue>0</minimumValue>
					<maximumValue>100</maximumValue>
				</logicalInteger>
				<physicalInteger>
					<operationType>store</operationType>
				</physicalInteger>
			</parameter>
		</variables>
	</parameterGroups>
</homegearDevice>
