<homegearDevice version="1">
	<supportedDevices>
		<device id="VirtualPushButtonSwitch">
			<description>Virtual Push Button Switch</description>
			<typeNumber>0xFF01</typeNumber>
		</device>
	</supportedDevices>
	<runProgram>
		<startType>permanent</startType>
		<script2>
<![CDATA[<?php
/**
 * Class to share data between the main script and the event thread.
 */
class SharedData extends Threaded
{
    public $scriptId = 0;
    public $peerId = 0;
    public $interval = 60;
    public $press1 = false;
    public $press2 = false;
    public $stop = false;
    public $eventThread = NULL;
    public function run() {}
}
class EventThread extends Thread
{
    private $sharedData;
	public function __construct($sharedData)
	{
		$this->sharedData = $sharedData;
	}
	public function run()
	{
		$hg = new \Homegear\Homegear();
		if($hg->registerThread($this->sharedData->scriptId) === false)
		{
			$hg->log(2, "Could not register thread.");
			return;
		}
		$hg->subscribePeer($this->sharedData->peerId);
		while(!$this->sharedData->stop)
		{
			$result = $hg->pollEvent();
			if($result["TYPE"] == "event" && $result["PEERID"] == $this->sharedData->peerId)
			{
				if($result["VARIABLE"] == "TRIGGER_PRESS")
				{
                    if($result["CHANNEL"] == 1) $this->sharedData->press1 = true;
                    else if($result["CHANNEL"] == 2) $this->sharedData->press2 = true;
					$this->sharedData->interval = 0;
					$this->synchronized(function($thread){ $thread->notify(); }, $this);
				}
			}
			else if($result["TYPE"] == "updateDevice" && $result["PEERID"] == $this->sharedData->peerId)
			{
				$this->sharedData->interval = 0;
				$this->synchronized(function($thread){ $thread->notify(); }, $this);
			}
		}
	}
}
class MainThread extends Thread
{
	private $sharedData;
	public function __construct($sharedData)
	{
		$this->sharedData = $sharedData;
	}
	public function run()
	{
		$hg = new \Homegear\Homegear();
		if($hg->registerThread($this->sharedData->scriptId) === false)
		{
			$hg->log(2, "Could not register thread.");
			return;
		}
		while(!$this->sharedData->stop)
		{
			$this->sharedData->interval = 60;
            
            if($this->sharedData->press1 || $this->sharedData->press2)
            {
                $channel = $this->sharedData->press1 ? 1 : 2;
                $this->sharedData->press1 = false;
                $this->sharedData->press2 = false;
                $hg->setValue($this->sharedData->peerId, $channel, "STATE", true);
                $this->sharedData->eventThread->synchronized(function($thread){ $thread->wait(rand(100000, 1500000)); }, $this->sharedData->eventThread);
                $hg->setValue($this->sharedData->peerId, $channel, "STATE", false);
            }
            
		    $waited = 0;
		    while($waited < $this->sharedData->interval && !$this->sharedData->stop)
		    {
		    	$this->sharedData->eventThread->synchronized(function($thread){ $thread->wait(1000000); }, $this->sharedData->eventThread);
		    	$waited += 1;
		    }
		}
	}
}
class HomegearDevice extends HomegearDeviceBase
{
	private $hg = NULL;
	private $peerId = NULL;
	private $sharedData = NULL;
	private $mainThread = NULL;
	private $eventThread = NULL;
	function __construct()
	{
		$this->hg = new \Homegear\Homegear();
	}
	function __destruct()
	{
		$this->stop();
		$this->waitForStop();
	}
	public function init($peerId) : bool
	{
		$this->peerId = $peerId;
		return true;
	}
	public function start() : bool
	{
		$this->sharedData = new SharedData();
		$this->sharedData->peerId = $this->peerId;
		$this->sharedData->scriptId = $this->hg->getScriptId();
		$this->eventThread = new EventThread($this->sharedData);
		$this->eventThread->start();
		$this->sharedData->eventThread = $this->eventThread;
		$this->mainThread = new MainThread($this->sharedData);
		$this->mainThread->start();
		return true;
	}
	public function stop()
	{
		if($this->eventThread || $this->mainThread) $this->sharedData->stop = true;
	}
	public function waitForStop()
	{
		if($this->mainThread) $this->mainThread->join();
		$this->mainThread = NULL;
		if($this->eventThread) $this->eventThread->join();
		$this->eventThread = NULL;
	}
}
]]>
		</script2>
	</runProgram>
	<properties/>
	<functions>
		<function channel="0" type="" channelCount="1">
			<properties/>
			<configParameters>custom_ch0_master</configParameters>
		</function>
		<function channel="1" type="VirtualPushButton" channelCount="2">
			<properties/>
			<configParameters>config</configParameters>
			<variables>custom_ch1_values</variables>
		</function>
	</functions>
	<packets/>
	<parameterGroups>
		<configParameters id="config"/>
		<configParameters id="custom_ch0_master" />
		<variables id="custom_ch1_values">
			<parameter id="STATE">
				<properties>
					<casts>
						<rpcBinary/>
					</casts>
				</properties>
				<logicalBoolean/>
				<physicalNone>
					<operationType>store</operationType>
				</physicalNone>
			</parameter>
			<parameter id="TRIGGER_PRESS">
				<properties>
					<readable>false</readable>
					<casts>
						<rpcBinary/>
					</casts>
				</properties>
				<logicalAction/>
				<physicalNone>
					<operationType>store</operationType>
				</physicalNone>
			</parameter>
		</variables>
	</parameterGroups>
</homegearDevice>
